<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GuangzhengLi</title><link>https://guangzhengli.com/</link><description>Recent content on GuangzhengLi</description><generator>Hugo -- gohugo.io</generator><copyright>2023 GuangzhengLi All rights reserved</copyright><lastBuildDate>Sat, 18 Mar 2023 16:05:00 +0800</lastBuildDate><atom:link href="https://guangzhengli.com/index.xml" rel="self" type="application/rss+xml"/><item><title>把阅读作为方法</title><link>https://guangzhengli.com/blog/zh/reading/</link><pubDate>Sat, 18 Mar 2023 16:05:00 +0800</pubDate><guid>https://guangzhengli.com/blog/zh/reading/</guid><description>&lt;p>记得笔者刚上大学的时候，尤其讨厌将阅读作为一种方法来讨论研究。认为读书唯求愉快，只在乎共鸣和是否获得了享受。当时笔者更追求的是读书不求甚解，对做研究般的读书方法是尽显鄙夷之态，对咬文嚼字般的读法更是嗤之以鼻。&lt;/p>
&lt;p>时过境迁，后续接触到了更复杂的学科，更加晦涩的知识后，对于知识也就有了更多的敬畏，并且慢慢发现自己的阅读方法和态度跟不上知识的要求，于是开始慢慢的探索起来，将目光重新放回到了阅读方法中，也就有了这一篇文章。&lt;/p>
&lt;h2 id="散漫的缺陷">散漫的缺陷&lt;/h2>
&lt;blockquote>
&lt;p>我在生活、感受、思考，把自己意识到的一些东西记录了下来。更多的东西尚未被我意识到，它们已经存在，仍处在沉睡和混沌之中。读书的时候，因为共鸣，因为抗争，甚至因为走神，沉睡的被唤醒了，混沌的变清晰了。对于我来说，读书的最大乐趣之一是自我发现，知道自己原来还有这么一些好东西。&lt;/p>
&lt;/blockquote>
&lt;p>最初的时候，互联网上的资讯并不多，我所有的阅读活动都是基于大学图书馆的藏书，大多数时间看的是王小波、余华、加缪、海明威等人的小说，那时认为散漫而随意的看书是一种生活态度，你不必记得你看过什么，就像你不必记得你哪天吃过什么一样，它们早就成为了你身体和精神的一部分。这种变化是滋润和成长型的，所以不必偃苗助长。&lt;/p>
&lt;p>这种理论直到现在我认为也有其合理之处，但是随着年龄的增长，接触到的学科和理论变多，这种散漫的阅读习惯还是带来了缺陷。最初让我感觉到吃力的是在大二期间接触了经济学，当时凭借着兴趣借阅了曼昆的&lt;a href="https://book.douban.com/subject/26435630/">《经济学原理》&lt;/a>，一口气读完了上下两册大部头。虽然阅读期间感觉重塑了自己的世界观，第一次有了一种解构世界的方法的喜悦，但是读完后心里反而空荡荡的，感觉这些知识犹如浮云般随时都会离自己而去。这和读完文学或者小说后的心态截然不同。&lt;/p>
&lt;p>直到我在读&lt;a href="https://book.douban.com/subject/1013208/">《如何阅读一本书》&lt;/a> 后，我才有意识到原来阅读不同种类的书籍，需要不同的阅读方法。像读小说一样不求甚解可能是好事，但是阅读专业性书籍，如果不梳理大纲，不进行主题阅读，那么可能就无法说自己读了这本书。&lt;/p>
&lt;blockquote>
&lt;p>主题阅读，也可以称作比较阅读，这是所有阅读中要求最高和难度最大的阅读类型。 主题阅读是&lt;strong>围绕某个主题同时阅读多种越粗材料，并进行对比、分析&lt;/strong>。 主题阅读的目标不是全面理解任何一种特定的阅读文本而是为了加深对于某个主题的理解。&lt;/p>
&lt;/blockquote>
&lt;p>在这之后，我有意识的开始探索阅读的方法，减轻阅读以外不必要的负担，经过较长时间的调整和修改，目前这一套方法是我迭代出的产物，虽然后续难免进行修补，但是核心流程已经经过时间的检验。&lt;/p>
&lt;p>我的阅读工作流分别是&lt;strong>发现、收集、计划、阅读和输出&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>发现：寻找感兴趣的、有价值的书籍。&lt;/li>
&lt;li>收集：通过工具收集书籍。&lt;/li>
&lt;li>计划：围绕 OKR 或者个人兴趣，构建特定的主题书单，制定阅读计划。&lt;/li>
&lt;li>阅读：针对不同种类书籍使用不同阅读方法。&lt;/li>
&lt;li>输出(可选)：如果有必要，用输出知识的方式加深理解。&lt;/li>
&lt;/ol>
&lt;h2 id="发现之旅">发现之旅&lt;/h2>
&lt;p>虽然如今互联网时代获取信息的媒介有很多，例如博客、网站、长短视频、线上交流等等，但是想要获得系统性的知识，书籍仍然是我认为最佳的实践，没有之一。但这一切有一个前提，即阅读的对象必须是优质的内容，如果阅读劣质内容，则比其它媒介更容易使人陷入偏见和狭隘。&lt;/p>
&lt;h3 id="寻找书籍">寻找书籍&lt;/h3>
&lt;p>如果你本身还没有什么目标，不清楚自己对哪类书籍感兴趣，那么不妨去书店逛逛。对比网上他人的推荐和电子书籍，纸质的书籍能给人提供更直接的反馈，亲手翻一翻书的目录和大致的内容，相信能很快的知道自己是否对该类型的书籍感兴趣。&lt;/p>
&lt;p>由于压力和竞争，现存的独立书店对书籍展示和陈列的方式都有独特的考量，经常看看书店的热门推荐位，也能快速发现新的好书。并且独立书店都有很强的个性，例如特定的类别或者作者，可以参考我&lt;a href="https://guangzhengli.com/art/zh/wuhan-bookstore/">闲逛武汉书店&lt;/a>的文章。像下面是在武汉视觉书屋拍摄的照片，整个书店陈列的都是艺术类书籍：&lt;/p>
&lt;p>&lt;img src="https://storage.guangzhengli.com/images/IMG_1025.jpeg" alt="IMG_1025">&lt;/p>
&lt;p>如果你对逛书店兴趣寥寥，那么在线上也可以先通过优质的书单找到感兴趣的科目，例如&lt;a href="https://book.douban.com/top250">豆瓣 Top250&lt;/a> 可以找到大多数经过时间检验的经典书籍。如果对新书兴趣浓厚，通过 &lt;a href="https://www.amazon.cn/gp/bestsellers/digital-text/116169071">Amazon 畅销书&lt;/a> 也能快速找到心动的书籍。&lt;/p>
&lt;p>在阅读初期，个人建议不要太纠结该书是否足够优秀，只要稍有兴趣，就可以通过检视阅读(可以理解为略读)来判断一本书是否值得读，只有读过才知道该书是否感兴趣，是否值得读，如果对该主题不感兴趣，无非是换一本书而已。&lt;/p>
&lt;p>如果你本身已经有了感兴趣的科目或者书籍，那么可以通过：作者还写过哪些书？是否有系列？哪家出版社出品？豆瓣的相似推荐？收藏了该书的豆瓣豆列？收藏该书的书单？来找到更多相似的书籍。除此之外还有不少作者会在序言或者末尾加上自己的推荐书目和参考书目，按图索骥即可。&lt;/p>
&lt;h2 id="收集之旅">收集之旅&lt;/h2>
&lt;h3 id="书籍归纳">书籍归纳&lt;/h3>
&lt;p>在发现了优质书籍和内容之后，我们需要做的一件事就是将它保存下来，并且收集归纳后将它可视化。一方面是因为我们无法做到当发现一本好书的时候，我们就可以立刻开始阅读它，并且一口气将它读完，特别是当进行主题阅读时，我们可能会一次性的阅读多本同类书籍，所以在阅读之前，还需要收集和归纳。&lt;/p>
&lt;p>另一方面是由于同一时间感兴趣和收集的书可能会远远超过你阅读的时间，所以在阅读前，还需要进行计划性的挑选。看看是否满足主题阅读的需要，当前阅读的优先级等。&lt;/p>
&lt;p>首先第一步是将感兴趣的书籍归纳到一处。对于这一步的工具和流程需要：&lt;/p>
&lt;ul>
&lt;li>自动化：能自动添加书籍名称、作者、ISBN、封面等，也支持手动添加。&lt;/li>
&lt;li>灵活性：能添加删除书籍的字段，有助于更好的组织归纳。如书籍类别、看完日期，评分等。&lt;/li>
&lt;li>可视化：良好的页面支持，可定制化的展示自己需要的字段和图片。如陈列正在读、想读、已读等页面。&lt;/li>
&lt;li>笔记支持：与后续的输出相结合，与笔记合二为一有助于减轻管理的压力。&lt;/li>
&lt;/ul>
&lt;p>在这些需求下，目前我个人选择的产品是 &lt;a href="https://www.notion.so/">Notion&lt;/a>，它的数据库功能可以覆盖后三条需求，配合其 Chrome 插件 &lt;a href="https://chrome.google.com/webstore/detail/save-to-notion/ldmmifpegigmeammaeckplhnjbbpccmm">Save to notion&lt;/a> 可以完美实现第一条自动化功能。整体流程简单，定制化程度高，结合 notion 的设计语言简约、克制。综合起来是我个人最偏爱的方案。&lt;/p>
&lt;p>其整个保存逻辑流程如下：&lt;/p>
&lt;p>首先在 notion 中定制一个图书资源的数据库，定制相关的数据库字段。诸如书籍名称、作者、读书状态、封面图片、类别等等。&lt;/p>
&lt;p>&lt;img src="https://storage.guangzhengli.com/images/screenshotr_2023-3-19T16-44-26.png" alt="screenshotr_2023-3-19T16-44-26">&lt;/p>
&lt;p>其次可以通过该数据库组织视图，将在读书单、想读书单、已读书单和计划书单列在入口处，这样一个基本的组织就成功了。你可以通过点击 &lt;a href="https://guangzhengli.notion.site/Guangzheng-Book-Template-a446554b015748deb4c61559f99f9bf8">Guangzheng Book Template&lt;/a> 来复制模版创建一个属于你的数据库和书籍管理系统。&lt;/p>
&lt;p>&lt;img src="https://storage.guangzhengli.com/images/screenshotr_2023-3-19T16-57-50.png" alt="screenshotr_2023-3-19T16-57-50">&lt;/p>
&lt;p>当你创建好一个数据库后，便可以开始将书籍自动化的保存到数据库中，目前中文书籍信息最全的地方还是&lt;a href="https://book.douban.com/">豆瓣读书&lt;/a>，所以我们针对豆瓣图书构建自动化流程。通过下载 Chrome 插件 &lt;a href="https://chrome.google.com/webstore/detail/save-to-notion/ldmmifpegigmeammaeckplhnjbbpccmm">Save to notion&lt;/a>，进入豆瓣某一本书的页面，点击 Notion Saver 图标，配置图书数据库和相应数据库字段，点击 Save 便可以轻易保存。配置如下图所示：&lt;/p>
&lt;p>&lt;img src="https://storage.guangzhengli.com/images/iIlR0O.png" alt="iIlR0O">&lt;/p>
&lt;p>整个流程如下图 GIF 所示：&lt;/p>
&lt;p>&lt;img src="https://storage.guangzhengli.com/images/db061686-c348-4325-b3e5-d11632c7a396.gif" alt="db061686-c348-4325-b3e5-d11632c7a396">&lt;/p>
&lt;h2 id="计划阅读">计划阅读&lt;/h2>
&lt;p>从前文可以得知笔者之前一直都是随机阅读的爱好者，转向计划阅读最主要的一个因素就是主题阅读的需要。当你需要对一个理论或者现象进行辩证看待时，只看一个作者的观点往往容易陷入偏见，一本书往往难以窥视知识的全貌。&lt;/p>
&lt;p>为此我们需要对同一个问题，获取不同作者、不同角度的看法。诸如经济学中的国家干预主义与经济自由主义，凯恩斯与哈耶克可以得出完全相反的观点，这类例子在书籍和生活中数不胜数。需要我们保持平和、谦逊的态度，对相关的知识进行主题阅读，才能有所收获。&lt;/p>
&lt;blockquote>
&lt;p>以前在读书的时候，容易对某本书或者某个作者产生崇拜，但是过了几年在重读这本书的时候，经常会产生失望感，也不太能理解当年为什么会如此狂热这本书或者人。以至于后面读书的时候，无论书写的多么有道理，多么的出色，也会默默的保持一定的距离。&lt;/p>
&lt;/blockquote>
&lt;p>其次是部分知识有较高的门槛，如果阅读不按顺序的话，容易无效阅读和磨损对其的兴趣。例如对明史没有任何了解，就直接读《万历十五年》，书中的草灰蛇线就容易被忽视，最后对书的评价也就截然不同。还有类似于哲学体系，很多理论都是继承前人扩展或者批判的，如果直接跳过前人理论就进行阅读则容易一头雾水。&lt;/p>
&lt;p>所以制定阅读计划是有助于构建个人的知识体系的，计划阅读并不是推荐你计划一年或一个月要读多少本书，而是要明确感兴趣的领域主题，列出主题书单，制定阅读顺序。&lt;/p>
&lt;p>对于书籍来说，你可以在 notion 中创建一个新的 Page 来存放书单，例如下面的经济学书单，你同样可以在 &lt;a href="https://guangzhengli.notion.site/Guangzheng-Book-Template-a446554b015748deb4c61559f99f9bf8">Guangzheng Book Template&lt;/a> 中找到这个页面：&lt;/p>
&lt;p>&lt;img src="https://storage.guangzhengli.com/images/screenshotr_2023-3-19T18-31-29.png" alt="screenshotr_2023-3-19T18-31-29">&lt;/p>
&lt;p>当计划制定完成后，通常计划书单中的书籍数量往往比实际能阅读的要多，这时还可以继续进行删减，保证阅读内容的质量进一步的提高。&lt;/p>
&lt;h2 id="阅读">阅读&lt;/h2>
&lt;p>关于如何阅读，笔者认为最关键就是阅读本身。看过很多关于阅读的讨论与争吵，诸如阅读设备的选择？纸质还是电子？电子书的阅读软件等等。笔者认为这些都不重要，也无须对此进行过多思考，&lt;/p>
&lt;p>小时候我是通过在书店租书 2 毛钱一天的方式进行阅读，大学时期从图书馆借阅图书，工作后租房于是选择电子阅读的方式。这些不同的阅读方式对于我阅读本身来讲并没有任何区别，同样是与作者的灵魂对话，用纸质书或者昂贵的设备并不会让这个过程变得更加顺利。当然从阅读效率来讲，还是需要承认，买书不如借书！借书不如租书！人类的懒惰和劣根性在我身上还是体现的淋漓尽致！&lt;/p>
&lt;p>所以大胆放弃对阅读工具投入时间，专注阅读本身！多阅读一本书内容本身，比起将时间花费在阅读工具、方式和流程要来的更加有价值，希望大家共勉！&lt;/p>
&lt;h3 id="分类阅读">分类阅读&lt;/h3>
&lt;p>上面是讲从工具层面如何阅读我们无需关注，但是从认知层面还是需要方法性的思考。例如如何阅读不同类型的书籍，每一种书籍都有其特定需要关注的地方。我们在阅读前就需要带着问题进行思考，这样有助于辩证的看待问题。&lt;/p>
&lt;p>例如阅读专业型书籍如经济政治学科，我们可能需要关注这本书在谈些什么？关于这本书的意义和内容？作者的目的？内容真实吗？你对主题的观点观看前后变化大吗？是否会进行调整？最后感觉本书哪里说的对？哪里说的有缺陷？&lt;/p>
&lt;p>但如果你观看的是想象文学或者故事书籍，那么上述的关注点则毫无意义。因为在想象文学中，可能更要注意的是不要抗拒故事带给你的想象和影响力，不要去找共识、主旨、或者论述，更不要用适于传递知识、与真理一致的标准来看待小说。&lt;/p>
&lt;h3 id="分层阅读">分层阅读&lt;/h3>
&lt;p>除了需要关注分类的阅读方法外，对于部分书籍和资料还需要进行分层阅读，根据自身的水平选择合适难度的书，例如：&lt;/p>
&lt;ul>
&lt;li>入门类：激发个人兴趣，了解某领域的大致范围和概念。以帮助自身了解是否对该主题感兴趣，是否继续研究？&lt;/li>
&lt;li>精通类：某领域中的基础教科书、通识书，需要有完整的体系结构。&lt;/li>
&lt;li>专业类：已经对整个领域有相当的了解，对领域的某一个方向、流派进行定向、延展阅读。&lt;/li>
&lt;li>先驱类：不过多解释，超出笔者能力范畴太多，书籍的实效性大概率已经满足不了你了，去研究论文吧。&lt;/li>
&lt;/ul>
&lt;p>需要进行分层阅读的大多数都是专业书籍，关于这点笔者唯一要提醒的是，在入门级别以上，例如构建完整的领域知识体系，尽量选择国外的教科书，看看这个专业最好的学校使用的教科书是哪本，你可以通过 &lt;a href="https://galaxy.opensyllabus.org/">Open Syllabus Project&lt;/a> 来搜索顶级大学常用教材，以免被不称职的教科书毁掉你的兴趣。&lt;/p>
&lt;p>相信笔者，如果你前期阅读某领域书籍读不下去，大概率不是你的问题，而是作者的问题。&lt;/p>
&lt;h2 id="知行合一">知行合一&lt;/h2>
&lt;blockquote>
&lt;p>把学到的东西藏在心里不仅是可耻的，而且是有害的，凡是我们不去努力分享的，也必将从我们这里失去。&lt;/p>
&lt;/blockquote>
&lt;p>每当我阅读完一本书，我总是沾沾自喜，自认为又掌握了很多知识。直到随着时间的推移，记忆的模糊，我不得不悲观的承认，知识不会永远属于我。于是我努力探索方法将知识保留的久一点。包括但不限于这些方法：&lt;/p>
&lt;ul>
&lt;li>主动阅读：向书本和作者提出自己的疑问。
&lt;ul>
&lt;li>本书在谈些什么？ 是如何依次发展主题的，如何逐步从核心主题分解出从属的关键议题来。&lt;/li>
&lt;li>作者要表达什么？找出主要的想法、声明与论点。组合成作者想要传达的特殊讯息。&lt;/li>
&lt;li>本书说得有道理吗？是全部有道理，还是部分有道理？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>记录笔记：
&lt;ul>
&lt;li>列出大纲和重要观点。&lt;/li>
&lt;li>回答上述主动阅读的问题。&lt;/li>
&lt;li>相同主题书籍之间的关联，不同作者对同一个问题的看法。&lt;/li>
&lt;li>作者和自己的看法。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>那么经过上述的努力后，知识就属于我了吗？我不得不绝望的承认，知识的失去可能有所减缓，但是仍然在不可逆转的持续。&lt;/p>
&lt;p>并且在做笔记的过程中，写的满满当当的笔记会让我不承认自己的无知和浅薄，会认为自己写下的笔记，就是已经收获的知识，而笔记滋生出的优越感将自己带向自欺与虚荣。&lt;/p>
&lt;p>随着时间的推移，我发现只有靠分享知识，靠教导他人，才能缓解该问题。&lt;/p>
&lt;p>只有当分享时出现语塞词穷的情况，才能正视自己的无知。只有在不能自圆其说之时，才能正视自己的偏见。只有搜刮脑海中知识片段来教导他人时，才能发现自己可能根本没有掌握知识。&lt;/p>
&lt;p>所以遗憾的是，只有通过输出分享，以教代学的方式才能正视自己的无知与浅薄。甚至只有通过实际的行动知行合一，才能将知识完整掌握。&lt;/p>
&lt;p>那么我们该如何分享呢？身边有朋友进行分享讨论和争辩的话绝对是人生一大幸事，没有的话也无需在意，在互联网时代我们可以通过发表文章，例如发表到自己的博客或者网络平台上。也可以通过制作视频、举办 session 的方式来扩展，借此来找到更多志同道合的朋友。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>回顾上面所有内容，我们从主题阅读的需要，而衍生了一些的流程来辅助阅读。然而所有的工具和流程都只能作为辅助手段，切记不可因小失大，忘记初衷而陷入工具的漩涡中无法自拔。阅读方法论唯一有价值的就是阅读本身，多阅读一本书的内容本身，比起将时间花费在阅读工具、方式和流程要来的更加有价值，希望大家共勉！&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://sspai.com/post/78133">https://sspai.com/post/78133&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://galaxy.opensyllabus.org/">https://galaxy.opensyllabus.org/&lt;/a>&lt;/li>
&lt;li>《如何阅读一本书》&lt;/li>
&lt;/ol></description></item><item><title>日志的艺术</title><link>https://guangzhengli.com/blog/zh/the-art-of-logging/</link><pubDate>Tue, 28 Feb 2023 20:33:36 +0800</pubDate><guid>https://guangzhengli.com/blog/zh/the-art-of-logging/</guid><description>&lt;p>理解日志并不是一件容易的事，开发人员在编写代码之时往往会纠结在某处打印的日志是不是有意义的，而 SRE 在面对缺少日志的生产问题时往往一筹莫展，Ops 在对面海量日志时往往需要花费更多的精力来维护，而项目的实际管理者在面对毫无实际业务价值的日志时，往往不想花费太多的人力和财力去管理它。&lt;/p>
&lt;p>因此，在开发应用程序时遵循良好的实践，在收集管理日志时选用成熟的方案，往往能让这些矛盾得以缓解，这也就有了这一篇的分享。&lt;/p>
&lt;h2 id="矛盾的开始">矛盾的开始&lt;/h2>
&lt;p>首先介绍的是为什么需要记录日志，日志的作用。其实关于日志的作用无需介绍太多，因为大多数的开发人员在调试代码问题时，解决不同环境的 Bug 时都有很明确的感受以及强烈的需求。日志作为调试的助手，生产环境的救星。笔者只见过嫌弃日志打的太少的，几乎没有见过嫌弃日志打的太多的开发和运维人员。通过查询日志的方式来确定代码的分支走向，API是否请求正确，核心业务的数据是否正确，是否有错误的堆栈信息，这些都构成开发和运维人员判断代码和生产问题的第一手段。笔者难以想象如果一个复杂庞大的系统没有记录任何日志，该如何排查生产环境的 Bug。&lt;/p>
&lt;p>如果有如此强烈的需求，那每一行代码都打日志来记录上下文不就行了吗？这样无论什么环境有什么代码有问题，通过搜索日志都可以排查出来。理论上这样确实可行，但是有一些问题目前无法解决，一是日志存储量的问题，常见的中大型系统日志大概在 TB 级，超大型系统的日志大概在 PB 级，根据 &lt;a href="https://blog.cloudflare.com/log-analytics-using-clickhouse/">Cloudflare提供的数据&lt;/a>，它每秒大概处理 4 千万的请求，这对于存储的费用来讲是一个巨大的挑战。二是搜索的性能下降，像 &lt;a href="https://github.com/elastic/elasticsearch">Elasticsearch&lt;/a> 数据库这类常见的日志存储方案，海量的日志会导致其所维护的映射关系爆炸式增长，即使划分不同的 Index，分布式管理不同的 ElasticSearch 集群，也很难做到搜索性能不随数据量的增加而下降。三是海量日志的生成会在峰期时拖慢系统性能，增大出故障的风险。&lt;/p>
&lt;p>所以综上可以得出最简单的结论，即日志既不能打印太多导致存储和管理日志太难，也不应该因为打印太少导致运维人员无法排查问题，这听起来自相矛盾，但这就是关于日志的艺术！&lt;/p>
&lt;h2 id="日志级别">日志级别&lt;/h2>
&lt;p>通常在我们打算记录日志前，我们需要判断打印日志的级别，在介绍如何确定日志级别前，我们先聊一聊日志级别的作用。首先第一点是大家所熟知的，日志级别可以帮助确定日志信息的优先级，可以有效的减少信息噪音和警报疲劳。二是在查询日志时，加到日志级别的过滤，能有效的查询到所需的日志。&lt;/p>
&lt;p>常见的日志级别有以下几类，并且从低到高的顺序是：&lt;code>TRACE&lt;/code>、&lt;code>DEBUG&lt;/code> 、&lt;code>INFO&lt;/code>、 &lt;code>WARN&lt;/code>、&lt;code>ERROR&lt;/code>、 &lt;code>FATAL&lt;/code>。通常在本地环境，我们打印日志所配置的级别是 &lt;code>Trace&lt;/code> ，即打印出所有级别的日志，但是在生产环境，会随着存储的压力，查询的性能和磁盘 IO 的影响，将日志的级别调整到 &lt;code>INFO&lt;/code> 级别甚至是 &lt;code>ERROR&lt;/code> 级别。这就意味着你在代码中低于该级别的日志都不会打印。&lt;/p>
&lt;p>那这是不是代表我们在代码中只需要打印和生产环境匹配的日志级别呢？例如生产环境只打印 &lt;code>INFO&lt;/code> 级别的日志，我们在代码中写 &lt;code>DEBUG&lt;/code> 级别的日志并不会打印，也没有必要写了。有的项目管理者为了省下日志管理的费用，只在生产环境只打印 &lt;code>ERROR&lt;/code> 级别的日志，那是不是 &lt;code>INFO&lt;/code> 级别的日志也可以不写呢？代码中只打印和生产环境匹配的日志级别日志，这确实是笔者在大多数项目时看到的现状，但是现实情况也往往更加复杂，例如以下几个场景。&lt;/p>
&lt;h3 id="场景一">场景一&lt;/h3>
&lt;p>某工程师在调查生产环境中某个创建资源的 API 性能较低问题时，发现是由于该 API 在保存资源前做了写 &lt;code>INFO&lt;/code> 级别的日志，将资源对象都写到日志中，由于资源的对象属性很多，所以导致在业务峰期时，代码打印出海量日志，耗尽Buffer区内存，从而拖慢主线程，造成服务性能整体下降。因此该工程师将该业务日志打印操作删除，以降低生产环境磁盘 IO 损耗，解决性能问题。&lt;/p>
&lt;p>但是某天由于修改了该 API 服务调用链路上的某服务代码，导致该 API 创建出来的对象有错误，并且由于缺少了生产环境保存该资源时的日志，无法排查出是 API 的请求参数有问题，还是后续的计算逻辑有问题。这时我们只能重新修改日志级别，重新构建发布上线吗？&lt;/p>
&lt;h3 id="场景二">场景二&lt;/h3>
&lt;p>假设将生产环境的日志设置为 &lt;code>ERROR&lt;/code> 级别。某一时刻，依赖的下游服务故障，导致请求大量超时。又由于在业务峰期 QPS 非常高的时期，短时间内集中产生大量的错误日志，导致磁盘IO急剧提高，耗费大量CPU，进而导致整个服务瘫痪。我们应该如何处理？&lt;/p>
&lt;h3 id="场景三">场景三&lt;/h3>
&lt;p>某工程师在排查生产问题时，发现 &lt;code>INFO&lt;/code> 级别的日志还无法满足排查 Root Cause，有一个 &lt;code>DEBUG&lt;/code> 日志级别的日志是他需要的，但是生产环境只有 &lt;code>INFO&lt;/code> 级别，这时只能修改级别然后重新启动服务吗？&lt;/p>
&lt;h3 id="日志级别规范与动态调整">日志级别规范与动态调整&lt;/h3>
&lt;p>解决以上问题的方法，一是需要我们在项目中，明确日志级别的规范，不为了调试方便和减少存储随意使用日志级别。二是给日志级别加上&lt;strong>动态调整&lt;/strong>的功能。也就是需要解决线上问题时，调低线上日志输出级别，获取全面的Debug日志，帮助工程师提高定位问题的效率。在生产日志海量增加拖慢服务性能时，调高线上日志输出级别，减少日志的生成，缓解磁盘 IO 压力和提高服务性能。&lt;/p>
&lt;p>以下是对于日志级别给出的建议：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>TRACE：应该在开发期间使用它来追踪错误，但永远不要提交到版本控制系统（VCS）中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>DEBUG：记录程序中发生的任何事情。主要在调试期间使用，建议在进入生产阶段之前缩减调试语句的数量，只留下最有意义的条目，并可以在故障排除期间激活。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>INFO：记录所有由用户驱动的事件或特定于系统的操作（例如定期计划操作）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>WARN：此级别记录所有可能成为错误的事件。例如，如果一个数据库调用花费的时间超过预定义的时间，或者如果内存缓存接近容量。这将允许适当的自动警报，并在故障排除期间允许更好地了解系统在故障之前的行为方式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ERROR：在此级别记录每个错误条件。这可以是返回错误或内部错误条件的 API 调用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>FATAL：代表整个服务已经无法工作。请非常节制地使用这个级别。通常此级别记录表示程序的结束。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="记录日志">记录日志&lt;/h2>
&lt;h3 id="什么时候记录日志">什么时候记录日志&lt;/h3>
&lt;p>什么时候记录日志并没有标准规范，需要开发人员根据业务和代码来自行判断，除了常规的记录事件，例如进行了哪些操作、发生了与预期不符的情况、运行期间出现未能处理的异常或警告、定期自动执行的任务外。笔者还建议在以下场景加上日志：&lt;/p>
&lt;ul>
&lt;li>在调用第三方系统时，将调用 API 的 URL 带上 &lt;code>Request/Response Body&lt;/code> 和异常都记录到日志。原因是当发生故障时，能够有明确且清晰的的日志报告说明故障原因，减少不同系统服务运维人员或者不同公司之间的&lt;strong>责任界定&lt;/strong>，以更顺畅的方式推动问题的解决。&lt;/li>
&lt;li>在重要核心业务的关键代码和分支加上日志，例如 if-then-else 语句，它可以帮助开发人员了解程序是否根据其当前状态遍历了预期路径。并且由于核心业务的数据普遍难以手动复现，了解代码分支的走向至关重要。&lt;/li>
&lt;li>核心业务的审计日志，如果某业务和法律或合同具有关联性，给对应的操作加上审计日志是非常有必要的。并且存储日志要求强一致性数据库。&lt;/li>
&lt;li>应用服务启动时输出配置信息。初始化配置的逻辑一般只会执行一次，不便于诊断时复现，所以应该输出到日志中。&lt;/li>
&lt;/ul>
&lt;h3 id="日志属性">日志属性&lt;/h3>
&lt;p>除了在日志常规需要打印的 &lt;code>log level&lt;/code>，&lt;code>timestamp&lt;/code>，&lt;code>message&lt;/code>，&lt;code>exception&lt;/code> 和 &lt;code>stack trace&lt;/code> 外，排查问题往往还需要其它的字段来帮助定位和查找 Root Cause，常见的额外字段有以下几种：&lt;/p>
&lt;ul>
&lt;li>&lt;code>trace id&lt;/code> 即服务链路追踪的唯一 ID。在请求进入到系统 7 层网关时，即在 HTTP header 中加上对应请求整个生命周期唯一的 &lt;code>trace id&lt;/code>，并随着该请求调用一直携带。当请求链路过长，开发人员难以找到完整的请求日志时，&lt;code>trace id&lt;/code> 有助于反向查找完整日志。&lt;/li>
&lt;li>&lt;code>span id&lt;/code> 即表示 &lt;code>trac id&lt;/code> 生命周期中拆分的单个操作。例如当请求到达每个服务后，服务都会为请求生成 spanid，第一个 spanid 称之为 root span，而随请求一起从上游传过来的 spanid 会被记录成 pspanid (parent-spanid)。当前服务生成的 spanid 随着请求一起再传到下游服务时，这个spanid 又会被下游服务当做 pspanid 记录。由此 &lt;code>span id&lt;/code> 有助于当服务调用复杂时还原出整个请求的调用链路视图。&lt;/li>
&lt;li>&lt;code>user id&lt;/code> 即用户的唯一 ID。确保当用户上报 Issue 或者提交 TIcket 的时候，可以根据当前用户的唯一 ID 直接查询对应错误日志，减少干扰项，缩短排查周期。&lt;/li>
&lt;li>&lt;code>tenant_id&lt;/code> 这是租户 ID（如果存在）。对多租户系统非常有帮助&lt;/li>
&lt;li>&lt;code>request uri&lt;/code> 即当前微服务请求 URI (用户一个业务操作可能对应着多个服务不同的 &lt;code>request uri&lt;/code>)，当某业务出现问题时，通过该业务对应&lt;strong>入口&lt;/strong>的 &lt;code>request uri&lt;/code> 往往能很快拿到 &lt;code>trac id&lt;/code>，再通过 &lt;code>trac id&lt;/code> 去查找对应请求的日志往往能很快解决问题。&lt;/li>
&lt;li>&lt;code>application name&lt;/code> 即当前微服务名称。有助于识别哪个服务生成了此日志，也有助于通过 &lt;code>application name&lt;/code> 过滤日志，查询服务整体故障。&lt;/li>
&lt;li>&lt;code>pod name&lt;/code> 即当前请求所在的 k8s 资源 Pod 名称（如果存在）。目前大多数微服务使用 k8s 来完成容器编排，打印 &lt;code>pod name&lt;/code> 有助于当某个 &lt;code>pod&lt;/code> 故障时，重启或者 Kill Pod。&lt;/li>
&lt;li>&lt;code>host name&lt;/code> 即当前请求所在的机器名称。即使使用 k8s 托管微服务，也会出现由于 k8s 集群所在的某台机器出现磁盘或者网络故障时，服务无法正常工作的情况，打印 &lt;code>host name&lt;/code> 有助于排查问题最后一公里，即由于机器硬件问题导致故障。&lt;/li>
&lt;/ul>
&lt;h3 id="日志安全">日志安全&lt;/h3>
&lt;p>日志需要保证日志框架的安全和敏感信息处理。框架安全指的是使用成熟的，经过大量生产环境验证的日志框架库，而非自己造轮子。敏感信息处理是大部分公司的生命线，请牢记日志的安全性和合规性要求：&lt;/p>
&lt;ul>
&lt;li>不要泄露敏感的个人身份信息 (PII)。&lt;/li>
&lt;li>不要泄露加密密钥或秘密。&lt;/li>
&lt;li>确保公司的隐私政策涵盖日志数据。&lt;/li>
&lt;li>确保日志提供商满足合规性需求。&lt;/li>
&lt;li>确保满足数据存储时间要求。&lt;/li>
&lt;/ul>
&lt;h3 id="日志的坏味道">日志的坏味道&lt;/h3>
&lt;ul>
&lt;li>使用中文或者非英文打印日志。
&lt;ul>
&lt;li>英文表示日志将以 ASCII 字符记录。这一点特别重要，因为像中文经过一系列处理后，它可能因为字符集或者编码集最终无法正确呈现。&lt;/li>
&lt;li>英文自带分词效果，像使用 &lt;code>ElasticSearch&lt;/code> 这类倒排索引存储引擎存储日志，中文日志不仅需要添加专门的分词器，并且存储和查询效果不如英文。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>没有上下文的日志。类似直接打印 &lt;code>Transaction failed&lt;/code> 或者 &lt;code>User operation succeeds&lt;/code> 这类日志。因为在写代码时通过代码上下文能够理解日志消息，但是当阅读日志本身时，这个上下文不存在，这些消息可能无法理解。&lt;/li>
&lt;li>将打印日志的操作放在循环当中。除非特定需求，否则打印出来的日志不仅难以阅读和查找，还会耗费大量存储资源。&lt;/li>
&lt;li>引用慢操作数据，如果当前上下文中没有打印日志需要的数据，需要调用远程服务或者从数据库获取，又或者通过大量计算，那应该先考虑这项信息放到日志中是不是必要且恰当的。&lt;/li>
&lt;/ul>
&lt;h2 id="日志的可观测性">日志的可观测性&lt;/h2>
&lt;p>最近十年因为微服务和云原生的相继崛起，收集存储和分析日志领域发生了重大的变化。早期我们无需进行日志的收集，当时将单体服务的所有日志存储在文件当中，使用 tail、grep、awk 来从日志中挖掘信息。但是在系统日益复杂的今天，这种方式已经无法满足我们的需求。为了应对日益复杂的日志管理需求，开源社区和工业界也发展出一些列的方案，例如最为流行的 &lt;a href="https://www.elastic.co/elastic-stack/">Elastic Stack&lt;/a> 开源解决方案，云厂商提供的一站式解决方案像 &lt;a href="https://www.datadoghq.com/product/log-management/">AWS DataDog&lt;/a> 和 &lt;a href="https://www.dynatrace.com/monitoring/platform/log-management-analytics/">Azure Dynatrace&lt;/a>。&lt;/p>
&lt;p>无论使用哪种方案，日志管理都已经不再是一个简单的话题。在我们有明确感知的打印日志和查询分析日志之间，还包含着对日志进行收集、缓冲、聚合、加工、索引、存储等若干个步骤，并且每一步都蕴含着艰难曲折。&lt;/p>
&lt;p>&lt;img src="https://storage.guangzhengli.com/images/azaofU.jpg" alt="azaofU">&lt;/p>
&lt;h3 id="日志的收集">日志的收集&lt;/h3>
&lt;p>最早我们使用 &lt;a href="https://www.elastic.co/elastic-stack/">Elastic Stack&lt;/a> 中的 &lt;a href="https://www.elastic.co/logstash/">Logstash&lt;/a> 来进行日志的收集和加工。系统中不同的服务通过使用 tcp/udp 的协议，主动发送请求将日志推送到 Logstash 中，接着 Logstash 将日志进行转换加工(数据结构化)和输出。这种模式维持了很长一段时间，但是它也有比较严重的缺陷，那就是 Logstash 与它的插件是基于 JRuby 编写的，要跑在单独的 Java 虚拟机进程上，默认的堆大小就到了 1GB。如果需要部署成千上万个日志收集器，那么这种方案就显得太过沉重。所以后来 Elastic.co 公司使用 Golang 重写了一个功能较少，却更轻量高效的日志收集器 &lt;a href="https://github.com/elastic/beats/tree/master/filebeat">Filebeat&lt;/a> 才缓解了这一矛盾。&lt;/p>
&lt;p>除此之外 &lt;a href="https://github.com/fluent/fluentd">Fluentd&lt;/a> 通常是配合 Kubernetes 时的首选开源日志收集器。它是 Kubernetes 原生的，可以使用 DaemonSet 的方式部署与 Kubernetes 无缝集成。它允许从不同的地方像 Kubernetes 集群、MySQL、Apache2 等收集日志，并解析发送到所需位置如 Elasticsearch、Amazon S3 等。Fluentd 用 Ruby 编写的，在低容量下运行良好，但当需要增加节点和应用程序的数量时，也会有会性能问题。&lt;/p>
&lt;p>最后在日志收集时，有可能会因为业务峰期生成海量日志，影响服务稳定性和造成日志丢失。在这种情况下，我们还需要在 Logstash 或者存储日志数据库前加上一道缓冲层。在较小规模的系统中 &lt;a href="https://redis.io/topics/streams-intro/">Redis streams&lt;/a> 是一个较好的选择，如果面对的规模更大的数据，那么 Kafka 集群或者云厂商提供的消息队列解决方案将是不二之选。&lt;/p>
&lt;h3 id="结构化日志">结构化日志&lt;/h3>
&lt;p>在收集完日志后，我们还需要进行结构化的处理。因为日志是非结构化数据，一行日志中通常会包含多项信息，如果不做处理，那只能以全文检索的原始方式去使用日志，这样既不利于统计对比，也不利于条件过滤。像下面这一行是 Nginx 服务器的 Access Log。&lt;/p>
&lt;pre tabindex="0">&lt;code>10.209.21.28 - - [04/Mar/2023:18:12:11 +0800] &amp;#34;GET /index.html HTTP/1.1&amp;#34; 200 1314 &amp;#34;https://guangzhengli.com&amp;#34; Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36
&lt;/code>&lt;/pre>&lt;p>尽管我们已经习惯了默认的 Nginx 格式，但上面的示例仍然难以阅读和处理。我们可以通过 Logstash 或者其它工具将它转换成结构化的数据，例如 JSON 格式。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;RemoteIp&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;10.209.21.28&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;RemoteUser&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">null&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Datetime&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;04/Mar/2023:10:49:21 +0800&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Method&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;GET&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;URL&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/index.html&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Protocol&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;HTTP/1.1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Status&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">200&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Size&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1314&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Refer&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://guangzhengli.com&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Agent&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>经过结构化后，例如像 ElasticSearch 这类倒排索引数据库可以针对不同的数据项建立索引，进行查询统计、聚合等操作。&lt;/p>
&lt;p>除此之外还有一种工业界的做法像 &lt;a href="https://dev.splunk.com/enterprise/docs/developapps/addsupport/logging/loggingbestpractices/">Splunk&lt;/a> 推荐将字段变为 key-value 对的形式放在同一个大的规范日志行中(logfmt)，如将 Nginx 日志作为规范日志行将变成如下这样：&lt;/p>
&lt;pre tabindex="0">&lt;code>remote-ip=10.209.21.28 remote-user=null datetime=&amp;#34;04/Mar/2023:10:49:21 +0800&amp;#34; method=GET url=https://guangzhengli.com/index.html protocol=HTTP/1.1 status=200 size=1314 refer=https://guangzhengli.com agent=&amp;#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36&amp;#34;
&lt;/code>&lt;/pre>&lt;p>这类数据经过 Splunk 存储后，可以通过使用内置的查询语言进行检索，像使用 &lt;code>method=get status=500&lt;/code> 查询所有返回 500 响应的 GET 方法。使用 &lt;code>method=get method=get status=500 earliest=-7d | timechart count&lt;/code> 查询语句得到过去 7 天返回 500 响应的 GET 方法总数量和图表。这种方式笔者使用的并不多，所以感兴趣的可以参考 &lt;a href="https://stripe.com/blog/canonical-log-lines">Stripe canonical-log-lines&lt;/a> 这篇文章获得更多细节。&lt;/p>
&lt;h3 id="日志的存储与查询">日志的存储与查询&lt;/h3>
&lt;p>经过日志的数据结构化后，可以将数据存入数据库中并进行查询分析。在选择使用什么方案来存储和分析之前，我们先来看看日志数据的特点。&lt;/p>
&lt;ul>
&lt;li>日志是写入密集型的，超过 99% 的日志写入后不会被查询使用。&lt;/li>
&lt;li>日志是标准的时间流数据，需要顺序写入，存储到数据库后，不会再进行修改变动。&lt;/li>
&lt;li>日志是具有时效性的，一般只需要最近一段时间的日志来查询分析或者排查故障，一段时间以后会被保留策略清除或者归档。&lt;/li>
&lt;li>日志是半结构化的，尽管我们将所有应用服务的日志都进行结构化，还是还包含系统日志，网络日志等日志，它们字段各不相同。&lt;/li>
&lt;li>查询日志依赖全文检索和即席查询（Ad-hoc search）。&lt;/li>
&lt;li>查询日志不要求日志具有强时效性，但是也无法接受按小时甚至按天的延时。&lt;/li>
&lt;/ul>
&lt;p>基于以上的存储和查询需求 &lt;a href="https://github.com/elastic/elasticsearch">Elasticsearch&lt;/a> 在日志存储领域一骑绝尘，Elasticsearch 可以使用时间范围作为索引，例如根据实际数据量以按日索引的话，由于能准确地预知明天、后天的日期，因此全部索引都可以预先创建，这免去了动态创建的寻找节点、创建分片、在集群中广播变动信息等开销。其次 Elasticsearch 可以针对不同时间范围的数据，进行冷热数据处理，针对最近一段时间的日志数据，在硬件中搭配 SSD 和更强的处理器，针对时间更久的数据，可以使用 HDD 存储或者 AWS S3 进行归档。&lt;/p>
&lt;p>最重要的是 Elasticsearch 的核心存储引擎使用倒排索引天生适配全文检索，并且与其搭配的 Kibana(只负责图形界面和展示) 可以完美适配数据检索、聚合、统计和定制形成各种图形、表格。下图为 &lt;a href="https://www.elastic.co/elastic-stack/">Elastic Stack&lt;/a> 官方图片：&lt;/p>
&lt;p>&lt;img src="https://storage.guangzhengli.com/images/nWzzSw.jpg" alt="nWzzSw">&lt;/p>
&lt;p>当然 Elasticsearch 也不是没有缺陷的，Mapping Explosion 就是 Elasticsearch 已知的缺陷之一，Elasticsearch 维护着一个文档 (document) 和字段 (fields) 的映射表，当这个映射表拥有太多的 key 时，会占用大量的内存，导致频繁的垃圾回收。还有它的次冷热分层存储也有其缺陷之处，Elasticsearch 每天都会将数据从热存储移动到冷存储，这也会影响集群的读写性能。&lt;/p>
&lt;p>所以 Elasticsearch 对于一些中小型集群和全文检索有很好的支持，但是对于超大型集群和面向分析的场景，使用面向列的数据库 ClickHouse 可能会是一个更好的选择。日志的不可变性完美的适合 ClickHouse 的存储和分析能力，搭配 ClickHouse 压缩编解码器可以大幅度减少存储需求，其线性可扩展性可以轻松扩展集群。关于更多使用 ClickHouse 存储日志可以看这篇文章：&lt;a href="https://blog.cloudflare.com/log-analytics-using-clickhouse/">Log analytics using ClickHouse&lt;/a>。商业开源公司 &lt;a href="https://signoz.io/blog/opentelemetry-logs/">Signoz&lt;/a> 也将 ClickHouse 作为其 OpenTelemetry 实现方案。下图展示的即 Signoz 的&lt;a href="https://www.splunk.com/en_us/blog/learn/splunk-log-observer.html">实时日志分析场景&lt;/a>。&lt;/p>
&lt;p>&lt;img src="https://storage.guangzhengli.com/images/8fYrZD.jpg" alt="8fYrZD">&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>回顾整篇文章，我们主要涵盖了打印日志的最佳实践，管理日志的难题和应对挑战的方案。日志作为系统服务最重要的观测手段之一，其重要性不言而喻。在系统日益复杂的今天，开发和运维人员应遵循良好的日志实践，以此来应对日志管理的挑战。&lt;/p>
&lt;p>由于笔者能力有限，以上内容如果有任何错误或者片面的观点，还请直接指出。如果有补充的地方，欢迎在评论或者&lt;a href="https://github.com/guangzhengli/guangzhengli.github.io">仓库&lt;/a>进行补充，非常感谢！&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://blog.cloudflare.com/log-analytics-using-clickhouse/">https://blog.cloudflare.com/log-analytics-using-clickhouse/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cortex.io/post/best-practices-for-logging-microservices">https://www.cortex.io/post/best-practices-for-logging-microservices&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stripe.com/blog/canonical-log-lines">https://stripe.com/blog/canonical-log-lines&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://messagetemplates.org/">https://messagetemplates.org/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.dataset.com/blog/the-10-commandments-of-logging/">https://www.dataset.com/blog/the-10-commandments-of-logging/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://brandur.org/canonical-log-lines">https://brandur.org/canonical-log-lines&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dev.splunk.com/enterprise/docs/developapps/addsupport/logging/loggingbestpractices/">https://dev.splunk.com/enterprise/docs/developapps/addsupport/logging/loggingbestpractices/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://opentelemetry.io/docs/reference/specification/logs/#log-correlation">https://opentelemetry.io/docs/reference/specification/logs/#log-correlation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://signoz.io/blog/opentelemetry-logs/">https://signoz.io/blog/opentelemetry-logs/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://izsk.me/2021/10/31/OpenTelemetry-Trace/">https://izsk.me/2021/10/31/OpenTelemetry-Trace/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sematext.com/guides/kubernetes-logging/">https://sematext.com/guides/kubernetes-logging/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.datadoghq.com/product/log-management/">https://www.datadoghq.com/product/log-management/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.dynatrace.com/monitoring/platform/log-management-analytics/">https://www.dynatrace.com/monitoring/platform/log-management-analytics/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tech.meituan.com/2017/02/17/change-log-level.html">https://tech.meituan.com/2017/02/17/change-log-level.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://icyfenix.cn/distribution/observability/logging.html">http://icyfenix.cn/distribution/observability/logging.html&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>用 serverless 开发一个 Chat 机器人提醒</title><link>https://guangzhengli.com/blog/zh/webhook-with-serverless/</link><pubDate>Mon, 19 Dec 2022 00:00:00 +0000</pubDate><guid>https://guangzhengli.com/blog/zh/webhook-with-serverless/</guid><description>&lt;p>本文描述了笔者基于 Serverless 技术开发 Chat 机器人提醒应用的全流程，记录了开发遇到的一些问题和技术选择的思考。在开发完成后，有小伙伴想知道一些技术细节来做二次开发，于是有了这篇分享。&lt;/p>
&lt;h2 id="业务需求">业务需求&lt;/h2>
&lt;p>最开始想开发一个 Chat 机器人提醒，是因为当时项目上的人很多，每天都需要轮换站会和 Code Review 的 Owner，导致每天的站会和 Code Review 时，都需要先花费几分钟时间确认今天的站会 Owner 是谁，接着确定后还要准备 Share 屏幕，最后还需要手动维护项目人员轮换名单，会议的体验很差。为了解决以下的常规会议的痛点：&lt;/p>
&lt;ul>
&lt;li>杜绝会议开始时常见的灵魂问题，今天的 owner 是谁&lt;/li>
&lt;li>缩短会议的准备时间，预防 owner 没有提前去会议室准备的情况&lt;/li>
&lt;li>预防到时间后，有人忘记参加会议，需要人手动提醒&lt;/li>
&lt;/ul>
&lt;p>所以有了第一个想法💡，即做一个自动提醒的机器人，包括有如下功能来缓解痛点：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定时发送消息&lt;/p>
&lt;ul>
&lt;li>在工作日时，在会议开始前5分钟时，发送提醒文本。&lt;/li>
&lt;li>在周末，不发送消息&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>当发送文本消息时，文本包括会议地址，owner，和会议时间。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>定时轮换 owner 名单，定时可配置，例如每天轮换，或者每周轮换。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>例如站会的提醒效果图如下所示：&lt;/p>
&lt;p>&lt;img src="https://storage.guangzhengli.com/images/screenshotr_2023-2-19T17-12-28.png" alt="screenshotr_2023-2-19T17-12-28">&lt;/p>
&lt;h2 id="技术选型">技术选型&lt;/h2>
&lt;p>在业务需求确定后，首先需要判断系统是否要求高可用、可扩展或者性能是否有要求。在这个用例中，这些技术要求都可以不要，毕竟只是自用的辅助手段，就算偶尔挂了也无所谓。这也为后续的技术选型打开了道路。&lt;/p>
&lt;p>其次需要预估该功能的资源需求，该功能每天定时发送的请求给 Chat 一般不超过 10 条，所以假设 &lt;code>Request / Day = 10&lt;/code>。存储的话需要存储会议的轮换名单，名字占用很少，所以预估最大就是 1KB &lt;code>Size of storage = 1KB&lt;/code>。&lt;/p>
&lt;p>得到技术需求和资源预估后，就能在后续技术选型时有比较明确的方向。首先列出几个可以完成这个功能的方案：&lt;/p>
&lt;ul>
&lt;li>Local machine + Disk&lt;/li>
&lt;li>Cloud VM + Disk&lt;/li>
&lt;li>Serverless
&lt;ul>
&lt;li>AWS Lambda + DynamoDB&lt;/li>
&lt;li>Azure Function + CosmosDB&lt;/li>
&lt;li>Cloudflare Worker + Worker KV&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="local-machine--disk">Local machine &amp;amp; Disk&lt;/h2>
&lt;p>首先我们尝试使用 Python 或者任意语言在本地环境进行 Schedule 定时，直接使用本地环境进行部署运行，因为不要求高可用，偶尔的服务宕机可以接受，所以在追求最简单的方式来实现也未尝不可。&lt;/p>
&lt;p>方案是使用 Python schedule 库或者任意语言定时发送消息，使用本地文件来存储轮换名单。优点是在本地部署调试和管理起来比较方便，不需要额外的花费，缺点是必须保证 Python 定时进程存活和网络可用，一旦电脑关机或者你请假时就不可用了🤔。如下代码 Demo 是从同目录下 &lt;code>code_review.txt&lt;/code> 文件中拿到当前会议 Owner 名字和下一个 Owner 的名字，一起发送 Code Review 提醒给企业微信。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> posixpath &lt;span style="color:#f92672">import&lt;/span> split
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> corpwechatbot.chatbot &lt;span style="color:#f92672">import&lt;/span> CorpWechatBot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> schedule
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> time
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> datetime &lt;span style="color:#f92672">import&lt;/span> datetime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>message &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;Code Review马上开始啦
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">-----------------------------
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">ZOOM URL: https://xxx.zoom.us/j/xxx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> ID: xxx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Passcode: xxx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">-----------------------------
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">今天的 host 是: &lt;/span>&lt;span style="color:#e6db74">{current_owner}&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">明天的 host 是: &lt;/span>&lt;span style="color:#e6db74">{next_owner}&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_code_review_owner_name&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;code_review.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>, encoding&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;utf-8&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name_array &lt;span style="color:#f92672">=&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>read()&lt;span style="color:#f92672">.&lt;/span>split()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_owner &lt;span style="color:#f92672">=&lt;/span> name_array[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> next_owner &lt;span style="color:#f92672">=&lt;/span> name_array[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name_array&lt;span style="color:#f92672">.&lt;/span>insert(len(name_array), name_array&lt;span style="color:#f92672">.&lt;/span>pop(&lt;span style="color:#ae81ff">0&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> write_txt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(name_array)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;code_review.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>, encoding&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;utf-8&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#f92672">.&lt;/span>write(write_txt)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#f92672">.&lt;/span>close
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> current_owner, next_owner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">send_notification&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_owner, next_owner &lt;span style="color:#f92672">=&lt;/span> get_code_review_owner_name()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> send_message &lt;span style="color:#f92672">=&lt;/span> message&lt;span style="color:#f92672">.&lt;/span>format(current_owner&lt;span style="color:#f92672">=&lt;/span>current_owner, next_owner&lt;span style="color:#f92672">=&lt;/span>next_owner)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bot &lt;span style="color:#f92672">=&lt;/span> CorpWechatBot(key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;key providerd by wechat work&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bot&lt;span style="color:#f92672">.&lt;/span>send_text(content&lt;span style="color:#f92672">=&lt;/span>send_message, mentioned_list&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;@all&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>schedule&lt;span style="color:#f92672">.&lt;/span>every()&lt;span style="color:#f92672">.&lt;/span>monday&lt;span style="color:#f92672">.&lt;/span>at(&lt;span style="color:#e6db74">&amp;#34;17:00&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>do(send_notification)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>schedule&lt;span style="color:#f92672">.&lt;/span>every()&lt;span style="color:#f92672">.&lt;/span>tuesday&lt;span style="color:#f92672">.&lt;/span>at(&lt;span style="color:#e6db74">&amp;#34;17:00&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>do(send_notification)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>schedule&lt;span style="color:#f92672">.&lt;/span>every()&lt;span style="color:#f92672">.&lt;/span>wednesday&lt;span style="color:#f92672">.&lt;/span>at(&lt;span style="color:#e6db74">&amp;#34;17:00&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>do(send_notification)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>schedule&lt;span style="color:#f92672">.&lt;/span>every()&lt;span style="color:#f92672">.&lt;/span>thursday&lt;span style="color:#f92672">.&lt;/span>at(&lt;span style="color:#e6db74">&amp;#34;17:00&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>do(send_notification)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>schedule&lt;span style="color:#f92672">.&lt;/span>every()&lt;span style="color:#f92672">.&lt;/span>friday&lt;span style="color:#f92672">.&lt;/span>at(&lt;span style="color:#e6db74">&amp;#34;17:00&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>do(send_notification)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> schedule&lt;span style="color:#f92672">.&lt;/span>run_pending()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> time&lt;span style="color:#f92672">.&lt;/span>sleep(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="cloud-vm--disk">Cloud VM &amp;amp; Disk&lt;/h3>
&lt;p>第二个方案使用云服务器来运行定时进程，和第一个方案使用的技术栈和代码相同，可以用任意语言定时发送消息，只需要注意服务器时区问题即可。区别在于该方案需要购买云服务器来部署，不用在意关机或者不可用问题，但是在目前这种技术需求和资源需求下，去买一个云服务器完成该功能肯定是不划算的。&lt;/p>
&lt;p>以上两种方案都有各自的优缺点，一种是可用性不高，一种是费用高，所以接下来最后一种 Serverless 方案，即是可以解决这两种问题的方案，也是我们今天主要需要讲的方案。&lt;/p>
&lt;h2 id="serverless">Serverless&lt;/h2>
&lt;p>最后一种也是今天主要聊的方案，即使用无服务器计算的方式来完成定时计算，发送消息给 Chat Webhook 服务器。&lt;/p>
&lt;p>无服务器计算（serverless computing），是一种由云服务商（AWS，Azure 或 Cloudflare）负责通过动态分配资源来执行一段代码的执行模型，并且仅收取运行代码所使用资源的费用。该代码通常运行在无状态的容器中，能够被包括HTTP请求、调度事件（cron任务）等各种事件触发并运行。因为代码运行在无状态的容器中，所以无法存储数据，对此云服务商提供了不同类型的存储服务和 SDK，可以无缝衔接对应厂商提供的 Serverless。&lt;/p>
&lt;p>在之前分析技术需求时，我们了解到该应用的 &lt;code>Request / Day &amp;lt; 10&lt;/code>，每天所需的 CPU 时间很少，所以使用 serverless 来执行定时发送消息的任务非常的合适。主要原因一是基础设施由云服务商提供，可用性方面有一定的保证，二是价格非常便宜(这也是 serverless 普及的最重要的原因)。下面是各大云服务商提供的每月免费额度，我们这个项目每个月用不到免费额度的万分之一。&lt;/p>
&lt;ul>
&lt;li>AWS Lamda: 128M + 3,200,000S / 1 month&lt;/li>
&lt;li>Azure Function: 1 million requests / 1 month&lt;/li>
&lt;li>Cloudflare Workers: 100,000 requests / 1 month&lt;/li>
&lt;/ul>
&lt;p>由于 serverless 是不提供存储功能的，所以需要存储人员轮换名单的话，光靠 serverless 的无状态容器就不够用了。需要用到各大云服务商提出的不同类型存储服务，比如有关系型数据库、NoSQL、KV，甚至是基于 SQLite 的 &lt;code>serverless database&lt;/code>，例如 &lt;a href="https://blog.cloudflare.com/introducing-d1/">Cloudflare D1&lt;/a>。回顾我们需要存储的数据，只是简单的团队人员名单，所以无需使用结构化的数据，只需要很简单的 KV 存储即可。如下面几个 KV 服务和其对应的云厂商的免费额度：&lt;/p>
&lt;ul>
&lt;li>AWS DynamoDB：25GB Storage + 1G Networks&lt;/li>
&lt;li>Azure CosmosDB: 1000 request per-second + 25GB storage&lt;/li>
&lt;li>Cloudflare Workers KV: 1GB storage&lt;/li>
&lt;/ul>
&lt;p>由于 Cloudflare 原生提供绑定域名和提供 &lt;code>serverless database&lt;/code>，所以笔者比较喜欢使用 Cloudflare Workers (不过可用性方面个人认为不如 AWS，偶尔会定时无效)。这里就以 Cloudflare Workers 为例展示功能代码，代码主要分为两个 &lt;code>serverless application&lt;/code>，也就是两个定时任务，一是定时发送消息给 Chat 提供的 webhook 地址，另一个是定时轮换主持会议的 owner 名单。&lt;/p>
&lt;p>首先是定时发送消息给 Chat 提供的 webhook 地址，从 KV 中获取当前的会议 Owner，会议地址和消息，通过获取配置的 webhook 地址发送给对应的 Chat（企业微信或者 Google Chat）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">send_google_chat_message&lt;/span> } &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;./google_chat_notificaiton&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">send_wework_chat_message&lt;/span> } &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;./wework_chat_notificaiton&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#a6e22e">scheduled&lt;/span>(&lt;span style="color:#a6e22e">controller&lt;/span>, &lt;span style="color:#a6e22e">env&lt;/span>, &lt;span style="color:#a6e22e">ctx&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">standup_owner_name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">get_owner_name&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>, &lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">KV_STANDUP_OWNER_NAMES&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">`今日的站会马上开始!!!\n今日站会 owner 是: &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">standup_owner_name&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">\n会议地址是: https://zoom.us/j/xxxx`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">MESSAGE_TYPE&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;GoogleChat&amp;#39;&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">send_google_chat_message&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>, &lt;span style="color:#a6e22e">message&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">MESSAGE_TYPE&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;WeworkChat&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">send_wework_chat_message&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>, &lt;span style="color:#a6e22e">message&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">get_owner_name&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>, &lt;span style="color:#a6e22e">type&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">namesString&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">notification_namespace&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#a6e22e">type&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">names&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">namesString&lt;/span>.&lt;span style="color:#a6e22e">split&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">names&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>二是定时轮换人员名单，这里主要是因为 owner 人员的轮换和会议主持时间可能不同步，例如每周轮换一次 Owner，明天发送 owner 主持的消息，所以需要单独的一个定时。下面代码实例展示周五发送轮换 owner 的消息。从 KV 中获取下一个 onwer 列表，轮换名单，并且 push 到 KV 中以便后续发送会议消息时拿到 owner 名单。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">send_google_chat_message&lt;/span> } &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;./google_chat_notificaiton&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">send_wework_chat_message&lt;/span> } &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;./wework_chat_notificaiton&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#a6e22e">scheduled&lt;/span>(&lt;span style="color:#a6e22e">controller&lt;/span>, &lt;span style="color:#a6e22e">env&lt;/span>, &lt;span style="color:#a6e22e">ctx&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">next_standup_owner_name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">getAndRotateOwners&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>, &lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">KV_STANDUP_OWNER_NAMES&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">`Happy Friday! 别忘记填写 timecard 哦!!!\n下周站会 owner 是: &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">next_standup_owner_name&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">MESSAGE_TYPE&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;GoogleChat&amp;#39;&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">send_google_chat_message&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>, &lt;span style="color:#a6e22e">message&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">MESSAGE_TYPE&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;WeworkChat&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">send_wework_chat_message&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>, &lt;span style="color:#a6e22e">message&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getAndRotateOwners&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>, &lt;span style="color:#a6e22e">type&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">namesString&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">notification_namespace&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#a6e22e">type&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">names&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">namesString&lt;/span>.&lt;span style="color:#a6e22e">split&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">names&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">names&lt;/span>.&lt;span style="color:#a6e22e">shift&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">storeNameString&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">names&lt;/span>.&lt;span style="color:#a6e22e">join&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">notification_namespace&lt;/span>.&lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#a6e22e">type&lt;/span>, &lt;span style="color:#a6e22e">storeNameString&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">names&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>完整的项目代码放在这个 &lt;a href="https://github.com/guangzhengli/workers-webhook-notification">仓库&lt;/a> 👈&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>回顾整个开发流程，我们能很轻易的感受到 serverless 的易用性和潜力，像类似于 WebHook、数据统计分析、Trigger 及定时任务和 Chat 机器人等功能，借用于 serverless 可以轻易的实现和部署，完成系统的原型设计和想法的闭环。近几年业界也在不断完善 serverless 的开发流程和核心缺陷，例如 &lt;a href="https://www.infoq.com/news/2022/12/aws-lambda-snapstart-accelerate/">JVM 冷启动问题&lt;/a>，&lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/telemetry-api.html">serverless 观测和调试增强&lt;/a>，数据库 serverless 化如&lt;a href="https://github.com/wundergraph/wunderbase">wunderbase&lt;/a>，&lt;a href="https://neon.tech/?utm_campaign=newsletter">Neon&lt;/a>，&lt;a href="https://planetscale.com/">planetscale&lt;/a>，&lt;a href="https://blog.cloudflare.com/introducing-d1/">D1&lt;/a> 等项目。假以时日，当这些问题慢慢解决和优化，serverless 广阔的前景和强大将刷新人们的认知。&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://sst.dev/chapters/zh/what-is-serverless.html">https://sst.dev/chapters/zh/what-is-serverless.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.cloudflare.com/introducing-d1/">https://blog.cloudflare.com/introducing-d1/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://aws.amazon.com/free/">https://aws.amazon.com/free/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://azure.microsoft.com/en-us/pricing/free-services/">https://azure.microsoft.com/en-us/pricing/free-services/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.infoq.com/news/2022/12/aws-lambda-snapstart-accelerate/">https://www.infoq.com/news/2022/12/aws-lambda-snapstart-accelerate/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/wundergraph/wunderbase">https://github.com/wundergraph/wunderbase&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.sqlite.org/serverless.html">https://www.sqlite.org/serverless.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/neondatabase/neon">https://github.com/neondatabase/neon&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>如何零成本给博客集成 umami 数据统计分析功能</title><link>https://guangzhengli.com/blog/zh/how-to-integrate-umami-for-free-to-blog-site/</link><pubDate>Sun, 14 Aug 2022 21:34:36 +0800</pubDate><guid>https://guangzhengli.com/blog/zh/how-to-integrate-umami-for-free-to-blog-site/</guid><description>&lt;p>本篇文章介绍如何零成本给博客或者网站集成 &lt;a href="https://umami.is/">umami&lt;/a> 统计功能。数据库用的是 &lt;a href="https://app.supabase.com/">supabase&lt;/a> 提供的有限额的 &lt;a href="https://supabase.com/docs/guides/database">postgres&lt;/a>，不过免费提供的 500M 对于 &lt;a href="https://umami.is/">umami&lt;/a> 来讲已经足够了。&lt;/p>
&lt;p>托管 &lt;a href="https://umami.is/">umami&lt;/a> 服务用的是 &lt;a href="https://vercel.com/">vercel&lt;/a>。得益于现在的云厂商优秀的服务能力，你可以在 10 分钟内集成好 &lt;em>umami&lt;/em>。可以点击 &lt;a href="https://umami-ochre-nu.vercel.app/share/o3zAba1V/guangzhengli">数据统计看板&lt;/a> 查看最终效果。&lt;/p>
&lt;h2 id="创建数据库">创建数据库&lt;/h2>
&lt;p>数据库用的是 &lt;a href="https://app.supabase.com/">supabase&lt;/a> 提供的有限额的 &lt;a href="https://supabase.com/docs/guides/database">postgres&lt;/a> 数据库，创建一个 supabase 账号，新建一个项目，输入 Datebase password 即可创建数据库服务。&lt;/p>
&lt;p>&lt;img src="https://storage.guangzhengli.com/images/WWmfTm.jpg" alt="WWmfTm">&lt;/p>
&lt;p>创建可能会话费几分钟时间，创建完成后只需要拿到 &lt;code>DATABASE_URL&lt;/code> 即可。&lt;/p>
&lt;p>&lt;img src="https://storage.guangzhengli.com/images/hvpSuQ.jpg" alt="hvpSuQ">&lt;/p>
&lt;h2 id="托管-umami">托管 umami&lt;/h2>
&lt;p>托管 &lt;a href="https://umami.is/">umami&lt;/a> 服务用的是 &lt;a href="https://vercel.com/">vercel&lt;/a>。创建好数据库实例之后，可以通过 Vercel 一键部署 umami 服务了。访问 &lt;a href="https://umami.is/">umami 官方文档&lt;/a> 的 &lt;a href="https://umami.is/docs/running-on-vercel">Running on Vercel&lt;/a> 模块，有操作说明与一键部署脚本。&lt;/p>
&lt;p>首先我们登录 GitHub 账号， &lt;code>fork&lt;/code> umami (&lt;a href="https://github.com/umami-software/umami">https://github.com/umami-software/umami&lt;/a>) 项目。&lt;/p>
&lt;p>登录 &lt;a href="https://vercel.com/">vercel&lt;/a> ，创建一个的账号，建议使用 GitHub 账号注册登录，在 &lt;code>new project&lt;/code> 中选择 &lt;code>import&lt;/code> 你刚刚 &lt;code>fork&lt;/code> 的项目。&lt;/p>
&lt;p>之后填写环境变量，这里我们需要填写两个环境变量&lt;/p>
&lt;ul>
&lt;li>DATABASE_URL：在创建数据库中拿到的 DATABASE_URL&lt;/li>
&lt;li>TRACKER_SCRIPT_NAME： 这里默认的 &lt;code>tracker_script_name&lt;/code> 可能会导致部分 &lt;code>AdBlock&lt;/code> 拦截请求，损失一部分的访问数据，所以这里我填的是 &lt;code>hugo-ladder&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>最后在 Build 阶段， &lt;code>build command&lt;/code> 记得填写 &lt;code>yarn build &amp;amp;&amp;amp; yarn update-db&lt;/code>，这样的话会自动 migrate 数据库的表。无需自己手动导入。&lt;/p>
&lt;p>&lt;img src="https://storage.guangzhengli.com/images/rtIZCn.jpg" alt="rtIZCn">&lt;/p>
&lt;p>当然如果你想自己导入的话，也可以直接从这里 &lt;a href="https://github.com/umami-software/umami/blob/master/sql/schema.postgresql.sql">https://github.com/umami-software/umami/blob/master/sql/schema.postgresql.sql&lt;/a> 获取需要的表。&lt;/p>
&lt;h2 id="配置-umami">配置 umami&lt;/h2>
&lt;p>在 vercel 部署完成 umami 后会得到一个 &lt;code>&amp;lt;deploy-id&amp;gt;.vercel.app&lt;/code> ，我们访问它，默认的账号密码是 &lt;strong>admin&lt;/strong> 和 &lt;strong>umami&lt;/strong>。&lt;/p>
&lt;p>完成基础帐号配置后，点击侧边栏网站 Tab，点击添加网站。填写网站基本信息，可以勾选 &lt;code>enable share URL&lt;/code>，这样任何人都可以访问这个数据看板。&lt;/p>
&lt;p>我们拿到对应的 &lt;code>data-website-id&lt;/code> 和 &lt;code>src&lt;/code> ，填入主题配置中的 &lt;code>params.analytics.umami.website_id&lt;/code> 和 &lt;code>params.analytics.umami.url&lt;/code> 即可。&lt;/p>
&lt;p>&lt;img src="https://storage.guangzhengli.com/images/YLRdbm.jpg" alt="YLRdbm">&lt;/p>
&lt;p>最终，我们可以得到本站数据统计看板的功能🎉🎉🎉&lt;/p></description></item><item><title>如何 30 分钟搭建一套完整独立博客</title><link>https://guangzhengli.com/blog/zh/how-to-create-your-blog-for-free-by-hugo-ladder-in-30min/</link><pubDate>Sun, 14 Aug 2022 16:47:12 +0800</pubDate><guid>https://guangzhengli.com/blog/zh/how-to-create-your-blog-for-free-by-hugo-ladder-in-30min/</guid><description>&lt;p>本文是关于如何搭建免费的独立博客系列的第二篇，包括如何使用本博客主题 &lt;code>hugo-ladder&lt;/code>，如何集成评论和统计功能等。如果后续打算使用该主题来搭建和运营博客，建议跟随本篇文章来搭建。&lt;/p>
&lt;h2 id="hugo">Hugo&lt;/h2>
&lt;h3 id="技术选型">技术选型&lt;/h3>
&lt;p>今天的大多数网站分为两类&amp;ndash;动态网站和静态网站。动态网站是基于服务器的，它的内容是变化的，可以根据用户返回不同的内容。例如根据不同用户的喜好进行推荐，根据地区进行内容语言区分。页面依靠内容管理系统（CMS）或数据库进行渲染，并可以随着需求的增长而不断增加复杂性。而缺点的话也很明显，首先你需要一笔不菲的服务器费用来支持带宽和并发，如果服务是面向全球的，还需要考虑多地部署来提升访问速度。&lt;/p>
&lt;p>还有一种就是我们选择的静态网站，使用 static site generators (SSG) 技术，会向所有用户显示相同的内容。使用服务器端的渲染来提供HTML、CSS和Javascript文件。静态网站的优势包括速度、安全和SEO。还易于维护，并具有高度可扩展性。由于静态网站生成器（SSG）在CDN上存储一个已经编译好的页面，它们的加载速度要快得多。&lt;/p>
&lt;p>我们可以选择免费托管到 CDN 或者平台 &lt;a href="https://netlify.com/">Netlify&lt;/a>、&lt;a href="https://www.heroku.com/">Heroku&lt;/a>、&lt;a href="https://www.godaddy.com/">GoDaddy&lt;/a>、&lt;a href="https://www.dreamhost.com/">DreamHost&lt;/a>、&lt;a href="https://pages.github.com/">GitHub Pages&lt;/a>、&lt;a href="https://about.gitlab.com/features/pages/">GitLab Pages&lt;/a>、&lt;a href="https://surge.sh/">Surge&lt;/a>、&lt;a href="https://firebase.google.com/docs/hosting/">Firebase&lt;/a>、&lt;a href="https://cloud.google.com/storage/">Google Cloud Storage&lt;/a>、&lt;a href="https://aws.amazon.com/s3/">Amazon S3&lt;/a>、&lt;a href="https://www.rackspace.com/cloud/files">Rackspace&lt;/a>、&lt;a href="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-static-website">Azure&lt;/a>和 &lt;a href="https://aws.amazon.com/cloudfront/">CloudFront&lt;/a> 上。&lt;/p>
&lt;p>对于开发者来讲，托管到 &lt;a href="https://pages.github.com/">GitHub Pages&lt;/a> 是最熟悉的方案，我们本篇文章也是基于此方案展开的教程。不过 &lt;a href="https://pages.github.com/">GitHub Pages&lt;/a> 对于部分地区的访问速度来讲并不友好，可以考虑使用其它自带 CDN 的免费平台来部署，例如本站使用的 &lt;a href="https://pages.cloudflare.com/">Cloudflare Pages&lt;/a>。&lt;/p>
&lt;p>在 static site generators (SSG) 方案中，有几种常见的方案，&lt;a href="https://hexo.io/">Hexo&lt;/a>, &lt;a href="https://jekyllrb.com/">Jekyll&lt;/a>, &lt;a href="https://gohugo.io/">Hugo&lt;/a> 和 &lt;a href="https://nextjs.org/">Next.js&lt;/a>。&lt;/p>
&lt;p>其中 &lt;a href="https://hexo.io/">Hexo&lt;/a> 的生态是最丰富和完善的，在 GitHub 中能找到最多的主题适配、最完善的第三方支持。但是考虑到我后续会自己开发定制化的主题和功能，去翻阅了下 &lt;a href="https://hexo.io/">Hexo&lt;/a> 的官方文档，结果 &lt;a href="https://hexo.io/">Hexo&lt;/a> 的文档不能说是事无巨细吧，只能说是等于没有。&lt;a href="https://nextjs.org/">Next.js&lt;/a> 是非常符合未来的一门技术，也是我比较心动的方案，但是后续发现 &lt;a href="https://nextjs.org/">Next.js&lt;/a> 在开发博客的生态上目前还不够完善。&lt;/p>
&lt;p>所以在对比了几项技术的优缺点后，我最终采用了Hugo。&lt;a href="https://gohugo.io/">Hugo&lt;/a> 是基于 &lt;code>golang&lt;/code> 编写的快速、现代的静态网站生成器。在 benchmark 测试中可以一秒渲染 5000 篇文章，也具备完善的生态。&lt;/p>
&lt;h3 id="安装">安装&lt;/h3>
&lt;p>安装 &lt;code>Hugo&lt;/code> 可以按照官方的文档一步一步安装 &lt;a href="https://gohugo.io/getting-started/installing">hugo install&lt;/a>。也可以按照下面命令快速安装。&lt;/p>
&lt;div class="tabs tabs-left">
&lt;style>
.tabs input#tab-0-0:checked ~ .tab-content-0-0 {
display: block;
}
&lt;/style>
&lt;input type="radio" class="tab-input" name="tab-select-0" id="tab-0-0" checked/>
&lt;label for="tab-0-0" class="tab-label">MacOS / Linux&lt;/label>
&lt;div class="tab-content tab-content-0-0">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>brew install hugo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;style>
.tabs input#tab-0-1:checked ~ .tab-content-0-1 {
display: block;
}
&lt;/style>
&lt;input type="radio" class="tab-input" name="tab-select-0" id="tab-0-1" />
&lt;label for="tab-0-1" class="tab-label">Window&lt;/label>
&lt;div class="tab-content tab-content-0-1">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>choco install hugo -confirm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>可以通过 &lt;code>hugo version&lt;/code> 来确保安装成功。&lt;/p>
&lt;h2 id="ladder">Ladder&lt;/h2>
&lt;p>本博客的主题名为 &lt;code>ladder&lt;/code>，中文即阶梯的含义，读书为输入，写作为输出，都是获取知识的阶梯。&lt;/p>
&lt;p>Ladder 主题的仓库地址是：&lt;a href="https://github.com/guangzhengli/hugo-theme-ladder">https://github.com/guangzhengli/hugo-theme-ladder&lt;/a>&lt;/p>
&lt;p>为大家准备好的一个已经配置好的仓库地址是： &lt;a href="https://github.com/guangzhengli/hugo-ladder-exampleSite">https://github.com/guangzhengli/hugo-ladder-exampleSite&lt;/a>&lt;/p>
&lt;p>如果你打算熟悉 &lt;code>hugo&lt;/code> 命令或者后续持续开发的话 ，可以从 &lt;a href="#%E9%85%8D%E7%BD%AE%E5%88%9D%E5%A7%8B%E5%8C%96">#配置初始化&lt;/a>一步一步来。&lt;/p>
&lt;p>如果你之前没有使用过 &lt;code>hugo&lt;/code> 或者是打算迁移博客的话，可以直接输入克隆已经初始化好的，在浏览器打开 &lt;code>http://localhost:1313/&lt;/code>。&lt;strong>并且可以直接跳转到 &lt;a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE">#自定义配置&lt;/a>。无需做初始化操作&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git clone https://github.com/guangzhengli/hugo-ladder-exampleSite.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo server -D
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="配置初始化">配置初始化&lt;/h3>
&lt;p>Hugo 提供了一个 &lt;code>new&lt;/code> 命令来创建一个新的网站:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>hugo new site my_website
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd my_website
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>初始化你的项目目录为 git 仓库, 并且把主题仓库作为你的网站目录的子模块。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git submodule add https://github.com/guangzhengli/hugo-theme-ladder themes/ladder
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为个人偏爱 &lt;code>yml&lt;/code> 的阅读习惯，所以本文使用 &lt;code>yml&lt;/code> 而非默认的 &lt;code>toml&lt;/code> 文件类型来配置，大家可以根据偏好到 &lt;a href="https://transform.tools/yaml-to-toml">transform.tool&lt;/a> 进行转换。&lt;/p>
&lt;p>下面是本主题完整的 &lt;code>config.yml&lt;/code> 文件，大家可以删除根目录下默认的 &lt;code>config.toml&lt;/code> 文件，新建一个 &lt;code>config.yml&lt;/code> 文件代替。&lt;/p>
&lt;p>
&lt;details class="toggle">
&lt;summary markdown="span">点击查看完整的 &lt;code>config.yml&lt;/code> 文件&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">baseURL&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;https://hugo-ladder.pages.dev&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">title&lt;/span>: &lt;span style="color:#ae81ff">LADDER&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">theme&lt;/span>: &lt;span style="color:#ae81ff">hugo-theme-ladder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">license&lt;/span>: &lt;span style="color:#ae81ff">MIT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">licenselink&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;https://github.com/guangzhengli/hugo-theme-ladder/blob/master/LICENSE&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">description&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;A fast, clean Hugo theme&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">homepage&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;https://hugo-ladder.pages.dev&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">defaultContentLanguage&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;en&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">googleAnalytics&lt;/span>: &lt;span style="color:#ae81ff">G-xxx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">paginate&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">params&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">brand&lt;/span>: &lt;span style="color:#ae81ff">HOME&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">avatarURL&lt;/span>: &lt;span style="color:#ae81ff">/images/avatar.png&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">author&lt;/span>: &lt;span style="color:#ae81ff">Hugo Ladder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">authorDescription&lt;/span>: &lt;span style="color:#ae81ff">A clean, fast hugo theme focused on Reading&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">info&lt;/span>: &lt;span style="color:#ae81ff">Build a free and beautiful blog site to record your thoughts and increase your influence&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">favicon&lt;/span>: &lt;span style="color:#ae81ff">/images/avatar.png&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">options&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">showDarkMode&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">enableImgZooming&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">enableMultiLang&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">darkModeTheme&lt;/span>: &lt;span style="color:#ae81ff">data-dark-mode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#darkModeTheme: icy-dark-mode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">comments&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">giscus&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">enable&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">repo&lt;/span>: &lt;span style="color:#ae81ff">username/repo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">repo_id&lt;/span>: &lt;span style="color:#ae81ff">xxx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">category&lt;/span>: &lt;span style="color:#ae81ff">Announcements&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">category_id&lt;/span>: &lt;span style="color:#ae81ff">xxx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mapping&lt;/span>: &lt;span style="color:#ae81ff">pathname&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">position&lt;/span>: &lt;span style="color:#ae81ff">top&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">lang&lt;/span>: &lt;span style="color:#ae81ff">en&lt;/span> &lt;span style="color:#75715e"># pick a language from https://github.com/giscus/giscus/tree/main/locales&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">utteranc&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">enable&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">repo&lt;/span>: &lt;span style="color:#ae81ff">username/xxx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">issueTerm&lt;/span>: &lt;span style="color:#ae81ff">pathname&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">analytics&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">google&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">SiteVerificationTag&lt;/span>: &lt;span style="color:#ae81ff">xxx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">umami&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">enable&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">website_id&lt;/span>: &lt;span style="color:#ae81ff">xxx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#ae81ff">https://xxx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">guestbook&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">title&lt;/span>: &lt;span style="color:#ae81ff">Guestbook&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">description&lt;/span>: &lt;span style="color:#ae81ff">Leave a comment below. It could be anything –- question, appreciation, information, or even humor.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">social&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">GitHub&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">pre&lt;/span>: &amp;gt;-&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;svg xmlns=&amp;#34;http://www.w3.org/2000/svg&amp;#34; width=&amp;#34;20&amp;#34; height=&amp;#34;20&amp;#34; viewBox=&amp;#34;0 0 24 24&amp;#34; fill=&amp;#34;none&amp;#34; stroke=&amp;#34;currentColor&amp;#34; stroke-width=&amp;#34;2&amp;#34; stroke-linecap=&amp;#34;round&amp;#34; stroke-linejoin=&amp;#34;round&amp;#34; class=&amp;#34;feather feather-github&amp;#34;&amp;gt;&amp;lt;path d=&amp;#34;M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22&amp;#34;&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;https://github.com/username/xxx&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Dashboard&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">pre&lt;/span>: &amp;gt;-&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;svg xmlns=&amp;#34;http://www.w3.org/2000/svg&amp;#34; width=&amp;#34;20&amp;#34; height=&amp;#34;20&amp;#34; viewBox=&amp;#34;0 0 24 24&amp;#34; fill=&amp;#34;none&amp;#34; stroke=&amp;#34;currentColor&amp;#34; stroke-width=&amp;#34;2&amp;#34; stroke-linecap=&amp;#34;round&amp;#34; stroke-linejoin=&amp;#34;round&amp;#34; class=&amp;#34;feather feather-box&amp;#34;&amp;gt;&amp;lt;path d=&amp;#34;M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z&amp;#34;&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;polyline points=&amp;#34;3.27 6.96 12 12.01 20.73 6.96&amp;#34;&amp;gt;&amp;lt;/polyline&amp;gt;&amp;lt;line x1=&amp;#34;12&amp;#34; y1=&amp;#34;22.08&amp;#34; x2=&amp;#34;12&amp;#34; y2=&amp;#34;12&amp;#34;&amp;gt;&amp;lt;/line&amp;gt;&amp;lt;/svg&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;https://xxx&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">languages&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">en&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">languageName&lt;/span>: &lt;span style="color:#ae81ff">EN&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">menu&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">main&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Blog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#ae81ff">/blog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">weight&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Tags&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#ae81ff">/tags&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">weight&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Archive&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#ae81ff">/archives&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">weight&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Guestbook&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#ae81ff">/guestbook&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">weight&lt;/span>: &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Dashboard&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#ae81ff">https://xxx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">weight&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">zh&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">languageName&lt;/span>: &lt;span style="color:#ae81ff">中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">author&lt;/span>: &lt;span style="color:#ae81ff">Ladder 主题&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">authorDescription&lt;/span>: &lt;span style="color:#ae81ff">一个美观，快速并且专注于阅读的主题&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">info&lt;/span>: &lt;span style="color:#ae81ff">帮助开发者构建一个免费并且漂亮的博客网站，记录自己的思考并且提高自己的影响力&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">guestbook&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">title&lt;/span>: &lt;span style="color:#ae81ff">留言板&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">description&lt;/span>: &lt;span style="color:#ae81ff">您的评论，会让该网站更精彩！&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">menu&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">main&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">文章&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#ae81ff">/blog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">weight&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">分类&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#ae81ff">/tags&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">weight&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">历史文章&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#ae81ff">/archives&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">weight&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">留言板&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#ae81ff">/guestbook&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">weight&lt;/span>: &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">网站统计&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#ae81ff">https://xxx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">weight&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">taxonomies&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">series&lt;/span>: &lt;span style="color:#ae81ff">series&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tag&lt;/span>: &lt;span style="color:#ae81ff">tags&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;/p>
&lt;h3 id="启动博客">启动博客&lt;/h3>
&lt;p>首先我们找到根目录下 &lt;code>archetypes&lt;/code> 文件夹中的 &lt;code>default.md&lt;/code> 文件，用下面的文件替代其中内容。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>title:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>date: {{ .Date }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tags: []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>series: []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>featured: true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Here is summary.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!--more--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>here is your content.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>复制 &lt;code>themes/ladder/exampleSite/content&lt;/code> 里面的内容到自己的根目录的 &lt;code>content&lt;/code> 下面。&lt;/p>
&lt;p>输入命令创建一篇名为 &lt;code>my-first-blog&lt;/code> 新的博客。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>hugo new blog/my-first-blog.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建后可以使用 &lt;code>hugo server -D&lt;/code> 来启动博客，并且在浏览器打开 &lt;code>http://localhost:1313/&lt;/code>，即可看到你的博客网站。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>hugo server -D
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="自定义配置">自定义配置&lt;/h2>
&lt;h3 id="多语言支持">多语言支持&lt;/h3>
&lt;p>首先我们需要确定我们博客默认使用的语言是哪种？是否需要多语言的支持？例如我们默认语言使用英文，那么 &lt;code>defaultContentLanguage&lt;/code> 即使用默认的 &lt;code>en&lt;/code>，假如默认使用中文就是 &lt;code>zh&lt;/code>。&lt;/p>
&lt;p>除此之外，如果不需要多语言的支持，先将 &lt;code>params.options.enableMultiLang&lt;/code> 设置为 &lt;code>false&lt;/code>, 删除配置文件 &lt;code>languages&lt;/code> 配置下其它语言的配置即可。&lt;/p>
&lt;p>上面的文件展示的是本博客使用的配置，多语言配置中默认语言是英文，可以切换成中文。&lt;/p>
&lt;h3 id="修改基本信息">修改基本信息&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">baseURL&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;https://hugo-ladder.pages.dev&amp;#39;&lt;/span> &lt;span style="color:#75715e">#修改为你的 https://username.github.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">homepage&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;https://hugo-ladder.pages.dev&amp;#39;&lt;/span> &lt;span style="color:#75715e">#修改为你的 https://username.github.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">params&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">brand&lt;/span>: &lt;span style="color:#ae81ff">HOME&lt;/span> &lt;span style="color:#75715e"># 修改默认的为自己网站的标志&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">avatarURL&lt;/span>: &lt;span style="color:#ae81ff">/images/avatar.png&lt;/span> &lt;span style="color:#75715e">#网站主页的照片信息，你可以在根目录 /static/images/ 里面替换成自己的照片&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">author&lt;/span>: &lt;span style="color:#ae81ff">Hugo Ladder&lt;/span> &lt;span style="color:#75715e"># 修改你自己的名字&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">authorDescription&lt;/span>: &lt;span style="color:#75715e"># 修改对你自己的描述&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">info&lt;/span>: &lt;span style="color:#75715e"># 修改对你自己网站描述&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">favicon&lt;/span>: &lt;span style="color:#ae81ff">/images/avatar.png&lt;/span> &lt;span style="color:#75715e">#网站的 icon，你可以在根目录 /static/images/ 里面替换成自己的照片&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">options&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">showDarkMode&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#75715e"># 是否支持黑暗模式&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">languages&lt;/span>: &lt;span style="color:#75715e"># 如果你启用多语言，下面是中文展示&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">zh&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">languageName&lt;/span>: &lt;span style="color:#ae81ff">中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">author&lt;/span>: &lt;span style="color:#ae81ff">Ladder 主题&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">authorDescription&lt;/span>: &lt;span style="color:#ae81ff">一个美观，快速并且专注于阅读的主题&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">info&lt;/span>: &lt;span style="color:#ae81ff">帮助开发者构建一个免费并且漂亮的博客网站，记录自己的思考并且提高自己的影响力&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>你可以一边修改一边通过浏览器打开 &lt;code>http://localhost:1313/&lt;/code> 实时观看效果。&lt;/p>
&lt;h3 id="导航栏">导航栏&lt;/h3>
&lt;p>目前本博客支持 4 种默认的页面，即博客列表，标签分类，历史文章和留言板，&lt;/p>
&lt;p>可以通过修改 &lt;code>menu.main&lt;/code> 来调整 &lt;code>名称&lt;/code> ，如果要添加新的页面或者修改 &lt;code>URL&lt;/code> 的话，记得在根目录的 &lt;code>content&lt;/code> 下面添加对应的 &lt;code>markdown&lt;/code> 文件。&lt;/p>
&lt;h3 id="黑暗模式">黑暗模式&lt;/h3>
&lt;p>本主题目前提供两种黑暗模式，一种是默认的 &lt;code>data-dark-mode&lt;/code> 模式，还有一种是 &lt;code>icy-dark-mode&lt;/code> 模式，可以通过修改 &lt;code>params.darkModeTheme&lt;/code> 的参数进行替换。大家可以自行探索，也欢迎贡献新的模式。&lt;/p>
&lt;h3 id="社交图标">社交图标&lt;/h3>
&lt;p>可以通过修改配置文件添加新的图标， &lt;code>params.social&lt;/code> 字段标明 &lt;code>名称&lt;/code>，&lt;code>图标&lt;/code>，&lt;code>自定义地址&lt;/code>，图标可以在这个网站找到 &lt;a href="https://feathericons.com/">feathericons.com&lt;/a>。&lt;/p>
&lt;h2 id="内容管理">内容管理&lt;/h2>
&lt;h3 id="文章管理">文章管理&lt;/h3>
&lt;p>每一次写文章建议填写的配置（也可以不填），文章开头有这个几个字段，分别代表着&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>title:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>date: {{ .Date }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tags: []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>series: []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>featured: true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>title&lt;/code> 文章题目&lt;/li>
&lt;li>&lt;code>date&lt;/code> 发布日期&lt;/li>
&lt;li>&lt;code>tags&lt;/code> 标签分类&lt;/li>
&lt;li>&lt;code>series&lt;/code> 系列文章，会在下方推荐阅读中推荐同系列文章&lt;/li>
&lt;li>&lt;code>featured&lt;/code> 是否在主页面中展示，&lt;code>true&lt;/code> or &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="富文本功能">富文本功能&lt;/h3>
&lt;p>目前博客默认集成 &lt;code>Toggle&lt;/code>和 &lt;code>Tab group&lt;/code> 两种富文本， &lt;code>Toggle&lt;/code> 的效果例如 &lt;a href="#%E9%85%8D%E7%BD%AE%E5%88%9D%E5%A7%8B%E5%8C%96">#配置初始化&lt;/a> 中可以隐藏代码或者文本， &lt;code>Tab group&lt;/code> 的效果例如在 &lt;a href="#%E5%AE%89%E8%A3%85">#安装Hugo&lt;/a> 中可以切换标签来写教程或文本。&lt;/p>
&lt;p>除此之外，还有集成 &lt;code>youtube&lt;/code> &lt;code>twitter &lt;/code> 和 &lt;code>站点页面跳转&lt;/code> 等富文本功能。详细可以查看 &lt;a href="https://hugo-ladder.pages.dev/blog/tag-plugins/">rich content&lt;/a>。&lt;/p>
&lt;p>我还新建了一个仓库 &lt;a href="https://github.com/guangzhengli/awesome-hugo-shortcodes">https://github.com/guangzhengli/awesome-hugo-shortcodes&lt;/a> ，用来收集 &lt;code>hugo shortcodes&lt;/code> ，大家可以去看看有没有自己需要的，可以自行添加。&lt;/p>
&lt;h2 id="留言板和评论功能集成">留言板和评论功能集成&lt;/h2>
&lt;p>本主题留言板和评论功能支持两种集成，一种是基于 &lt;a href="https://docs.github.com/en/issues">GitHub Issues&lt;/a> 的 &lt;a href="https://utteranc.es/">utteranc&lt;/a>，还有一种是基于&lt;a href="https://docs.github.com/en/discussions">GitHub Discussions&lt;/a> 的 &lt;a href="https://giscus.app/">giscus&lt;/a>。&lt;/p>
&lt;p>这里推荐大家使用基于&lt;a href="https://docs.github.com/en/discussions">GitHub Discussions&lt;/a> 的 &lt;a href="https://giscus.app/">giscus&lt;/a>，毕竟 &lt;code>Issues&lt;/code> 是比较严肃的功能， &lt;a href="https://giscus.app/">giscus&lt;/a> 的页面也比较美观，还可以在同一话题下持续回复。&lt;/p>
&lt;p>集成这两者的步骤都十分简单，只需要跟随 &lt;a href="https://utteranc.es/">utteranc&lt;/a> 和 &lt;a href="https://giscus.app/">giscus&lt;/a> 官方教程走到最后，生成对应的配置值，填入 &lt;code>params.comments&lt;/code> 里面对应的 &lt;code>giscus&lt;/code> &lt;code>utteranc&lt;/code> 即可，需要将另外的一个的 &lt;code>enable&lt;/code> 设置成 &lt;code>false&lt;/code>。&lt;/p>
&lt;h2 id="网站数据统计功能">网站数据统计功能&lt;/h2>
&lt;p>主题可以集成 &lt;a href="https://analytics.google.com/analytics/web/">Google analytics&lt;/a> 和 &lt;a href="https://umami.is/">umami&lt;/a> 两种网站数据统计能力。&lt;/p>
&lt;p>&lt;a href="https://analytics.google.com/analytics/web/">Google analytics&lt;/a> 可以通过官方文档得到对应 &lt;code>G-xxx&lt;/code> 开头的 &lt;code>MEASUREMENT ID&lt;/code> ，填入配置文件中的 &lt;code>googleAnalytics&lt;/code> 即可。&lt;/p>
&lt;p>&lt;a href="https://analytics.google.com/analytics/web/">Google analytics&lt;/a> 的集成简单和免费，不过缺点是无法做到隐私保护（对应数据会提供给 Google），页面也是比较笨重和缓慢。&lt;/p>
&lt;p>所以大家如果有需求可以自己搭建 &lt;a href="https://umami.is/">umami&lt;/a> 来做数据统计，相关过程和步骤我放到另外的一篇博客 &lt;a href="https://guangzhengli.com/blog/zh/how-to-integrate-umami-for-free-to-blog-site/">如何免费搭建的 umami&lt;/a>。&lt;/p>
&lt;h2 id="seo">SEO&lt;/h2>
&lt;p>&lt;code>SEO&lt;/code> 目前主题已经做了对应的优化，包括完善的 &lt;code>meta&lt;/code> 标签信息等。 除此之外，默认支持 &lt;a href="https://search.google.com/search-console">Google Search Console&lt;/a>，可以根据官方相关文档生成对应的 &lt;code>google-site-verification&lt;/code> ，填入对应的 &lt;code>params.analytics.google.SiteVerificationTag&lt;/code>。&lt;/p>
&lt;h2 id="部署">部署&lt;/h2>
&lt;p>关于部署也有多种方式，可以选择托管到 CDN 或者平台 &lt;a href="https://netlify.com/">Netlify&lt;/a>、&lt;a href="https://www.heroku.com/">Heroku&lt;/a>、&lt;a href="https://www.godaddy.com/">GoDaddy&lt;/a>、&lt;a href="https://www.dreamhost.com/">DreamHost&lt;/a>、&lt;a href="https://pages.github.com/">GitHub Pages&lt;/a>、&lt;a href="https://about.gitlab.com/features/pages/">GitLab Pages&lt;/a>、&lt;a href="https://surge.sh/">Surge&lt;/a>、&lt;a href="https://firebase.google.com/docs/hosting/">Firebase&lt;/a>、&lt;a href="https://cloud.google.com/storage/">Google Cloud Storage&lt;/a>、&lt;a href="https://aws.amazon.com/s3/">Amazon S3&lt;/a>、&lt;a href="https://www.rackspace.com/cloud/files">Rackspace&lt;/a>、&lt;a href="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-static-website">Azure&lt;/a>和 &lt;a href="https://aws.amazon.com/cloudfront/">CloudFront&lt;/a> 。&lt;/p>
&lt;p>本文选择大家比较通用的 &lt;a href="https://pages.github.com/">GitHub Pages&lt;/a> 来作为教程。&lt;/p>
&lt;h3 id="创建-githubhttpsgithubcom-账号">创建 &lt;a href="https://github.com/">GitHub&lt;/a> 账号&lt;/h3>
&lt;p>在搭建自己的博客前，我们需要先注册一个 &lt;a href="https://github.com/">GitHub&lt;/a> 账号，这个账号的账户名非常重要，它是后面我们博客的域名地址。&lt;/p>
&lt;p>例如我们创建的账号名称是 guangzhengli，那么我们最终的博客地址就是 &lt;a href="https://guangzhengli.github.io">https://guangzhengli.github.io&lt;/a>。&lt;/p>
&lt;h3 id="创建-github-pages-仓库">创建 GitHub Pages 仓库&lt;/h3>
&lt;p>完整的教程可以查看 &lt;a href="https://pages.github.com/">官方教程&lt;/a>，简单来讲就是 &lt;a href="https://github.com/new">创建一个新的 repository&lt;/a>，名字为 &lt;code>username.github.io&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://storage.guangzhengli.com/images/Xu5ikP.jpg" alt="Xu5ikP">&lt;/p>
&lt;h3 id="actions">Actions&lt;/h3>
&lt;p>&lt;code>Actions&lt;/code> 方式用两种，一种是直接推送到 &lt;a href="https://pages.github.com/">GitHub Pages&lt;/a> ，还有一种是在 &lt;code>gh-pages&lt;/code> 分支上生成静态页面代码的方式。代码都在 &lt;a href="https://github.com/guangzhengli/hugo-ladder-exampleSite/tree/master/.github/workflows">https://github.com/guangzhengli/hugo-ladder-exampleSite/tree/master/.github/workflows&lt;/a> 这里。&lt;/p>
&lt;p>如果你不是选择的直接克隆已经配置好的仓库： &lt;a href="https://github.com/guangzhengli/hugo-ladder-exampleSite">https://github.com/guangzhengli/hugo-ladder-exampleSite&lt;/a>。需要创建新的文件夹 &lt;code>.github/workflows&lt;/code> ，添加新的文件 &lt;code>gh-pages.yml&lt;/code> 文件。&lt;/p>
&lt;p>{{ &lt;!-- raw HTML omitted -->}}&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">generate github pages to gh-pages branch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">push&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">branches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">main&lt;/span> &lt;span style="color:#75715e">## Set a branch name to trigger deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">deploy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-20.04&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">submodules&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#75715e"># Fetch Hugo themes (true OR recursive)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fetch-depth&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#75715e"># Fetch all history for .GitInfo and .Lastmod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Setup Hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-hugo@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hugo-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;latest&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">extended&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">hugo --minify&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Deploy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-gh-pages@v3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># If you&amp;#39;re changing the branch from main, &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># also change the `main` in `refs/heads/main` &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># below accordingly.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">if&lt;/span>: &lt;span style="color:#ae81ff">github.ref == &amp;#39;refs/heads/main&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">github_token&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">publish_dir&lt;/span>: &lt;span style="color:#ae81ff">./public&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>{{ &lt;!-- raw HTML omitted --> }}&lt;/p>
&lt;h3 id="部署-github-pages">部署 GitHub Pages&lt;/h3>
&lt;p>在你项目的根目录下输入以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git remote add origin https://github.com/username/username.github.io.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#e6db74">&amp;#34;feat: init blog site&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push origin main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>确保我们推送成功后，我们会在 &lt;code>Actions&lt;/code> 中自动的将代码 build 成 GitHub Pages 需要的文件，可以到这个地址检查 &lt;code>workflow&lt;/code> 是否成功运行。注意将地址中 &lt;code>username&lt;/code> 替换成自己的账号名称。&lt;code>https://github.com/username/username.github.io/actions&lt;/code>。&lt;/p>
&lt;p>如果 &lt;code>Actions&lt;/code> 运行成功的话，我们会有一个新的分支叫做 &lt;code>gh-pages&lt;/code>。这时候我们去仓库的设置中心 &lt;code>Settings&lt;/code> ，选择 &lt;code>Pages&lt;/code> ，之后将 &lt;code>Build and deployment&lt;/code> -&amp;gt; &lt;code>Source&lt;/code> 选择 &lt;code>Deploy from a branch&lt;/code>。后面的 &lt;code>Branch&lt;/code> 选择 &lt;code>gh-pages&lt;/code> 即可配置成功。&lt;/p>
&lt;p>&lt;img src="https://storage.guangzhengli.com/images/cuQE65.jpg" alt="cuQE65">&lt;/p>
&lt;p>这个时候，选择上方的 &lt;code>Visit site&lt;/code> 或者手动输入 &lt;code>https://username.github.io&lt;/code> 即可访问成功！ 🎉🎉🎉&lt;/p>
&lt;p>如果部署时，有任何问题，可以在下方留言。&lt;/p></description></item><item><title>如何 10 分钟快速搭建你自己的独立博客</title><link>https://guangzhengli.com/blog/zh/how-to-create-your-blog-for-free-in-10min/</link><pubDate>Mon, 01 Aug 2022 00:00:00 +0000</pubDate><guid>https://guangzhengli.com/blog/zh/how-to-create-your-blog-for-free-in-10min/</guid><description>&lt;p>本文是如何搭建免费的独立博客系列的第一篇，也将教大家如何快速的使用 &lt;a href="https://pages.github.com/">GitHub Pages&lt;/a> 的功能来搭建属于自己的博客。&lt;/p>
&lt;p>本篇文章属于快速入门版，可以帮助大家快速搭建和观察效果。如果是了解更多关于 &lt;a href="https://github.com/guangzhengli/hugo-theme-ladder">hugo-ladder&lt;/a> 的内容，建议跟随这篇文章来搭建 &lt;a href="https://guangzhengli.com/blog/zh/how-to-create-your-blog-for-free-by-hugo-ladder-in-30min/">如何 30 分钟搭建一套完整独立博客&lt;/a>。&lt;/p>
&lt;h2 id="准备工作">准备工作&lt;/h2>
&lt;h3 id="创建-githubhttpsgithubcom-账号">创建 &lt;a href="https://github.com/">GitHub&lt;/a> 账号&lt;/h3>
&lt;p>在搭建自己的博客前，我们需要先注册一个 &lt;a href="https://github.com/">GitHub&lt;/a> 账号，这个账号的账户名非常重要，它是后面我们博客的域名地址。&lt;/p>
&lt;p>例如我们创建的账号名称是 guangzhengli，那么我们最终的博客地址就是 &lt;a href="https://guangzhengli.github.io">https://guangzhengli.github.io&lt;/a>。&lt;/p>
&lt;h3 id="创建-github-pages-仓库">创建 GitHub Pages 仓库&lt;/h3>
&lt;p>完整的教程可以查看 &lt;a href="https://pages.github.com/">官方教程&lt;/a>，简单来讲就是 &lt;a href="https://github.com/new">创建一个新的 repository&lt;/a>，名字为 &lt;code>username.github.io&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://storage.guangzhengli.com/images/Xu5ikP.jpg" alt="Xu5ikP">&lt;/p>
&lt;h2 id="搭建博客">搭建博客&lt;/h2>
&lt;p>我们可以选择直接克隆已经准备好的仓库 &lt;a href="https://github.com/guangzhengli/hugo-ladder-exampleSite">hugo-ladder-exampleSite&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code>git clone https://github.com/guangzhengli/hugo-ladder-exampleSite.git
&lt;/code>&lt;/pre>&lt;p>在拉取完代码后，我们需要修改配置信息，文件在根目录的 &lt;code>config.yml&lt;/code> 文件中，我们需要将 Demo 的配置修改成自己。&lt;/p>
&lt;blockquote>
&lt;p>请注意，一定记得修改配置信息，特别是拉取博客后大家会像评论配置等，否则将会给后续使用改教程的人带来困扰，谢谢🙏。如果想搭建自己独立的评论系统，可以参考这篇文章来搭建 &lt;a href="https://guangzhengli.com/blog/zh/how-to-create-your-blog-for-free-by-hugo-ladder-in-30min/">如何 30 分钟搭建一套完整独立博客&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="修改博客配置">修改博客配置&lt;/h3>
&lt;p>根目录的 &lt;code>config.yml&lt;/code> 文件，使用编辑器打开，修改如下大致的一些配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">baseURL&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;https://hugo-ladder.pages.dev&amp;#39;&lt;/span> &lt;span style="color:#75715e">#修改为你的 https://username.github.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">homepage&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;https://hugo-ladder.pages.dev&amp;#39;&lt;/span> &lt;span style="color:#75715e">#修改为你的 https://username.github.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">defaultContentLanguage&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;en&amp;#39;&lt;/span> &lt;span style="color:#75715e">#修改默认语言，例如改为 zh 即默认使用中文&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">params&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">brand&lt;/span>: &lt;span style="color:#ae81ff">HOME&lt;/span> &lt;span style="color:#75715e"># 修改默认的为自己网站的标志&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">avatarURL&lt;/span>: &lt;span style="color:#ae81ff">/images/avatar.png&lt;/span> &lt;span style="color:#75715e">#网站主页的照片信息，你可以在根目录 /static/images/ 里面替换成自己的照片&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">author&lt;/span>: &lt;span style="color:#ae81ff">Hugo Ladder&lt;/span> &lt;span style="color:#75715e"># 修改你自己的名字&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">authorDescription&lt;/span>: &lt;span style="color:#75715e"># 修改对你自己的描述&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">info&lt;/span>: &lt;span style="color:#75715e"># 修改对你自己网站描述&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">favicon&lt;/span>: &lt;span style="color:#ae81ff">/images/avatar.png&lt;/span> &lt;span style="color:#75715e">#网站的 icon，你可以在根目录 /static/images/ 里面替换成自己的照片&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">options&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">showDarkMode&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#75715e"># 是否使用切换黑暗模式&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">enableMultiLang&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#75715e"># 是否展示多语言选择&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">languages&lt;/span>: &lt;span style="color:#75715e"># 如果你启用多语言，下面是中文展示&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">zh&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">languageName&lt;/span>: &lt;span style="color:#ae81ff">中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">author&lt;/span>: &lt;span style="color:#ae81ff">Ladder 主题&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">authorDescription&lt;/span>: &lt;span style="color:#ae81ff">一个美观，快速并且专注于阅读的主题&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">info&lt;/span>: &lt;span style="color:#ae81ff">帮助开发者构建一个免费并且漂亮的博客网站，记录自己的思考并且提高自己的影响力&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="注释评论相关功能">注释评论相关功能&lt;/h3>
&lt;p>准备好的仓库 &lt;a href="https://github.com/guangzhengli/hugo-ladder-exampleSite">hugo-ladder-exampleSite&lt;/a> 主要给大家快速搭建使用。如果大家都使用同一套评论配置的话，会给后续使用该教程的人带来一定的困扰，可以先将相关功能注释掉。如果想搭建自己独立的评论系统，可以参考这篇文章来搭建 &lt;a href="https://guangzhengli.com/blog/zh/how-to-create-your-blog-for-free-by-hugo-ladder-in-30min/">如何 30 分钟搭建一套完整独立博客&lt;/a>。&lt;/p>
&lt;p>修改方案如下所示&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">comments&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">giscus&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">enable&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>改为如下所示&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">comments&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">giscus&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">enable&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="如何添加和修改自己的博客文章">如何添加和修改自己的博客文章&lt;/h2>
&lt;p>可以在根目录的 &lt;code>content/blog&lt;/code> 中找到该站点的 Demo 展示文章，可以选择新增一个 &lt;code>markdown&lt;/code> 文件添加自己想要表达的内容即可。&lt;/p>
&lt;p>目前在文章头部，需要添加上这几个标签来配置文章的展示：&lt;/p>
&lt;ul>
&lt;li>&lt;code>title&lt;/code>：文章标题。&lt;/li>
&lt;li>&lt;code>date&lt;/code>: 发布时间。&lt;/li>
&lt;li>&lt;code>tags&lt;/code>: 文章的标签，便于后续检索和查找类似文章。&lt;/li>
&lt;li>&lt;code>series&lt;/code>: 系列文章，可以为空，便于在文章末尾相关文章推荐使用。&lt;/li>
&lt;li>&lt;code>featured&lt;/code>: &lt;code>true&lt;/code> 或者 &lt;code>false&lt;/code>，是否在主页推荐中展示。&lt;/li>
&lt;/ul>
&lt;p>其次，可以通过添加 &lt;code>&amp;lt;!--more--&amp;gt;&lt;/code> 标签，标明哪些文字需要在博客的列表中外部展示用，哪些文字需要隐藏，如果不添加的话，会默认展示一定的字数。&lt;/p>
&lt;h2 id="部署代码">部署代码&lt;/h2>
&lt;h3 id="推送代码到自己的仓库">推送代码到自己的仓库&lt;/h3>
&lt;p>在第一步时，我们创建了名为 &lt;code>username.github.io&lt;/code> 的仓库地址，可以使用下面命令先将指向仓库 &lt;a href="https://github.com/guangzhengli/hugo-ladder-exampleSite">hugo-ladder-exampleSite&lt;/a> 的远程 URL 先去除，再添加自己的地址。注意将下面命令中 &lt;code>username&lt;/code> 替换成自己的账号名称。&lt;/p>
&lt;p>最后我们再推送我们的修改到自己的仓库。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git remote remove origin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git remote add origin https://github.com/username/username.github.io.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#e6db74">&amp;#34;feat: init blog site&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push origin main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="部署-github-pages">部署 GitHub Pages&lt;/h3>
&lt;p>确保我们推送成功后，我们会在 &lt;code>Actions&lt;/code> 中自动的将代码 build 成 GitHub Pages 需要的文件，可以到这个地址检查 &lt;code>workflow&lt;/code> 是否成功运行。注意将地址中 &lt;code>username&lt;/code> 替换成自己的账号名称。&lt;code>https://github.com/username/username.github.io/actions&lt;/code>。&lt;/p>
&lt;p>如果 &lt;code>Actions&lt;/code> 运行成功的话，我们会有一个新的分支叫做 &lt;code>gh-pages&lt;/code>。这时候我们去仓库的设置中心 &lt;code>Settings&lt;/code> ，选择 &lt;code>Pages&lt;/code> ，之后将 &lt;code>Build and deployment&lt;/code> -&amp;gt; &lt;code>Source&lt;/code> 选择 &lt;code>Deploy from a branch&lt;/code>。后面的 &lt;code>Branch&lt;/code> 选择 &lt;code>gh-pages&lt;/code> 即可配置成功。&lt;/p>
&lt;p>&lt;img src="https://storage.guangzhengli.com/images/cuQE65.jpg" alt="cuQE65">&lt;/p>
&lt;p>这个时候，选择上方的 &lt;code>Visit site&lt;/code> 或者手动输入 &lt;code>https://username.github.io&lt;/code> 即可访问成功！ 🎉🎉🎉&lt;/p>
&lt;p>如果部署时，有任何问题，可以在下方留言。&lt;/p></description></item></channel></rss>